<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SSM小书城整合</title>
      <link href="posts/dbb513eb.html"/>
      <url>posts/dbb513eb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>–<br>项目结构图<br><img src="/posts/dbb513eb/1.png" alt="1"></p><p>数据库</p><ul><li><p>创建一个存放书籍数据的数据库表</p><p>新建一Maven项目！ 添加web的支持</p></li><li><p>导入相关的pom依赖！</p></li><li><p>文件为pom.xml</p></li><li><p>文件为Maven资源过滤设置,静态资源导出问题</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>build<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>resources<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>resource<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>directory<span class="token operator">&gt;</span>src/main/java<span class="token operator">&lt;</span>/directory<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>includes<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>include<span class="token operator">&gt;</span>**/*.properties<span class="token operator">&lt;</span>/include<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>include<span class="token operator">&gt;</span>**/*.xml<span class="token operator">&lt;</span>/include<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>/includes<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>filtering<span class="token operator">&gt;</span>false<span class="token operator">&lt;</span>/filtering<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>/resource<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>resource<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>directory<span class="token operator">&gt;</span>src/main/resources<span class="token operator">&lt;</span>/directory<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>includes<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>include<span class="token operator">&gt;</span>**/*.properties<span class="token operator">&lt;</span>/include<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>include<span class="token operator">&gt;</span>**/*.xml<span class="token operator">&lt;</span>/include<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>/includes<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>filtering<span class="token operator">&gt;</span>false<span class="token operator">&lt;</span>/filtering<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>/resource<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>/resources<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/build<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mybatis层编写"><a href="#Mybatis层编写" class="headerlink" title="Mybatis层编写"></a>Mybatis层编写</h2><ul><li><p>数据库配置文件 database.properties</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jdbc.driver<span class="token operator">=</span>com.mysql.jdbc.Driver<span class="token comment"># &amp;serverTimezone=Asia/Shanghai</span>jdbc.url<span class="token operator">=</span>jdbc:mysql://localhost:3306/ssmbuild?useSSL<span class="token operator">=</span>true<span class="token operator">&amp;</span><span class="token assign-left variable">useUnicode</span><span class="token operator">=</span>true<span class="token operator">&amp;</span><span class="token assign-left variable">characterEncoding</span><span class="token operator">=</span>utf8jdbc.username<span class="token operator">=</span>rootjdbc.password<span class="token operator">=</span><span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写MyBatis的核心配置文件  mybatis-config.xml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span> ?<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE configuration       PUBLIC <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>       <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>configuration<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>typeAliases<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>package <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"com.kuang.pojo"</span>/<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>/typeAliases<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>mappers<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>mapper <span class="token assign-left variable">resource</span><span class="token operator">=</span><span class="token string">"com/kuang/dao/BookMapper.xml"</span>/<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>/mappers<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/configuration<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写数据库对应的实体类 com.pojo.Books，可使用lombok插件！</p></li><li><p>编写Dao层的 Mapper接口！</p></li><li><p>编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；</p></li><li><p>编写Service层的接口和实现类</p></li></ul><h2 id="Spring层"><a href="#Spring层" class="headerlink" title="Spring层"></a>Spring层</h2><ul><li>配置Spring整合MyBatis，我们这里数据源使用c3p0连接池；</li><li>我们去编写Spring整合Mybatis的相关的配置文件；spring-dao.xml</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">&gt;</span><span class="token operator">&lt;</span>beans <span class="token assign-left variable">xmlns</span><span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>      xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>      xmlns:context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>      xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd"</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置整合mybatis --<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token number">1</span>.关联数据库文件 --<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>context:property-placeholder <span class="token assign-left variable">location</span><span class="token operator">=</span><span class="token string">"classpath:database.properties"</span>/<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token number">2</span>.数据库连接池 --<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>--数据库连接池       dbcp 半自动化操作 不能自动连接       c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）   --<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>bean <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span><span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置连接池属性 --<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"driverClass"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.driver}</span>"</span>/<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"jdbcUrl"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.url}</span>"</span>/<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"user"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.username}</span>"</span>/<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"password"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.password}</span>"</span>/<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">!</span>-- c3p0连接池的私有属性 --<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"maxPoolSize"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"30"</span>/<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"minPoolSize"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"10"</span>/<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">!</span>-- 关闭连接后不自动commit --<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"autoCommitOnClose"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"false"</span>/<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">!</span>-- 获取连接超时时间 --<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"checkoutTimeout"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"10000"</span>/<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">!</span>-- 当获取连接失败重试次数 --<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"acquireRetryAttempts"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"2"</span>/<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>/bean<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token number">3</span>.配置SqlSessionFactory对象 --<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>bean <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"sqlSessionFactory"</span> <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"org.mybatis.spring.SqlSessionFactoryBean"</span><span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">!</span>-- 注入数据库连接池 --<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token assign-left variable">ref</span><span class="token operator">=</span><span class="token string">"dataSource"</span>/<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置MyBaties全局配置文件:mybatis-config.xml --<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"configLocation"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"classpath:mybatis-config.xml"</span>/<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>/bean<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token number">4</span>.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>bean <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span><span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">!</span>-- 注入sqlSessionFactory --<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"sqlSessionFactoryBeanName"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"sqlSessionFactory"</span>/<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">!</span>-- 给出需要扫描Dao接口包 --<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"basePackage"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"com.kuang.dao"</span>/<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>/bean<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/beans<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Spring整合service层，Spring-service.xml文件编写</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">&gt;</span><span class="token operator">&lt;</span>beans <span class="token assign-left variable">xmlns</span><span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>      xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>      xmlns:context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>      xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context.xsd"</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>-- 扫描service相关的bean --<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>context:component-scan base-package<span class="token operator">=</span><span class="token string">"com.service"</span> /<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>--BookServiceImpl注入到IOC容器中--<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>bean <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"BookServiceImpl"</span> <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"com.service.BookServiceImpl"</span><span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"bookMapper"</span> <span class="token assign-left variable">ref</span><span class="token operator">=</span><span class="token string">"bookMapper"</span>/<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>/bean<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置事务管理器 --<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>bean <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">!</span>-- 注入数据库连接池 --<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token assign-left variable">ref</span><span class="token operator">=</span><span class="token string">"dataSource"</span> /<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>/bean<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/beans<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><ul><li><p>web.xml编写</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">&gt;</span><span class="token operator">&lt;</span>web-app <span class="token assign-left variable">xmlns</span><span class="token operator">=</span><span class="token string">"http://xmlns.jcp.org/xml/ns/javaee"</span>        xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>        xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span>        <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"4.0"</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>--DispatcherServlet--<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>servlet<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>servlet-name<span class="token operator">&gt;</span>DispatcherServlet<span class="token operator">&lt;</span>/servlet-name<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>servlet-class<span class="token operator">&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="token operator">&lt;</span>/servlet-class<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>init-param<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>param-name<span class="token operator">&gt;</span>contextConfigLocation<span class="token operator">&lt;</span>/param-name<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span><span class="token operator">!</span>--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>param-value<span class="token operator">&gt;</span>classpath:applicationContext.xml<span class="token operator">&lt;</span>/param-value<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>/init-param<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>load-on-startup<span class="token operator">&gt;</span><span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/load-on-startup<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>/servlet<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>servlet-mapping<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>servlet-name<span class="token operator">&gt;</span>DispatcherServlet<span class="token operator">&lt;</span>/servlet-name<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>url-pattern<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>/url-pattern<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>/servlet-mapping<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>--encodingFilter--<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>filter<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>filter-name<span class="token operator">&gt;</span>encodingFilter<span class="token operator">&lt;</span>/filter-name<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>filter-class<span class="token operator">&gt;</span>          org.springframework.web.filter.CharacterEncodingFilter       <span class="token operator">&lt;</span>/filter-class<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>init-param<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>param-name<span class="token operator">&gt;</span>encoding<span class="token operator">&lt;</span>/param-name<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>param-value<span class="token operator">&gt;</span>utf-<span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/param-value<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>/init-param<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>/filter<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>filter-mapping<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>filter-name<span class="token operator">&gt;</span>encodingFilter<span class="token operator">&lt;</span>/filter-name<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>url-pattern<span class="token operator">&gt;</span>/*<span class="token operator">&lt;</span>/url-pattern<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>/filter-mapping<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>--Session过期时间--<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>session-config<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>session-timeout<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator"><span class="token file-descriptor important">5</span>&lt;</span>/session-timeout<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>/session-config<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/web-app<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>spring-mvc.xml编写</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">&gt;</span><span class="token operator">&lt;</span>beans <span class="token assign-left variable">xmlns</span><span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>      xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>      xmlns:context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>      xmlns:mvc<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/mvc"</span>      xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context.xsd   http://www.springframework.org/schema/mvc   https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置SpringMVC --<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token number">1</span>.开启SpringMVC注解驱动 --<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>mvc:annotation-driven /<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token number">2</span>.静态资源默认servlet配置--<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>mvc:default-servlet-handler/<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token number">3</span>.配置jsp 显示ViewResolver视图解析器 --<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>bean <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span><span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"viewClass"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"org.springframework.web.servlet.view.JstlView"</span> /<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"prefix"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"/WEB-INF/jsp/"</span> /<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span>property <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"suffix"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">".jsp"</span> /<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>/bean<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token number">4</span>.扫描web相关的bean --<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>context:component-scan base-package<span class="token operator">=</span><span class="token string">"com.kuang.controller"</span> /<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/beans<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h3><ul><li><p>applicationContext.xml</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">&gt;</span><span class="token operator">&lt;</span>beans <span class="token assign-left variable">xmlns</span><span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>      xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>      xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>import <span class="token assign-left variable">resource</span><span class="token operator">=</span><span class="token string">"spring-dao.xml"</span>/<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>import <span class="token assign-left variable">resource</span><span class="token operator">=</span><span class="token string">"spring-service.xml"</span>/<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>import <span class="token assign-left variable">resource</span><span class="token operator">=</span><span class="token string">"spring-mvc.xml"</span>/<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/beans<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就是编写Controller以及视图层了</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML的学习笔记</title>
      <link href="posts/19d2a4e6.html"/>
      <url>posts/19d2a4e6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="web概念概述"><a href="#web概念概述" class="headerlink" title="web概念概述"></a>web概念概述</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* <span class="token comment">##### JavaWeb：</span>* 使用Java语言开发基于互联网的项目<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="软件架构："><a href="#软件架构：" class="headerlink" title="软件架构："></a>软件架构：</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. C/S: Client/Server 客户端/服务器端* 在用户本地有一个客户端程序，在远程有一个服务器端程序* 如：QQ，迅雷<span class="token punctuation">..</span>.* 优点：<span class="token number">1</span>. 用户体验好* 缺点：<span class="token number">1</span>. 开发、安装，部署，维护 麻烦<span class="token number">2</span>. B/S: Browser/Server 浏览器/服务器端* 只需要一个浏览器，用户通过不同的网址<span class="token punctuation">(</span>URL<span class="token punctuation">)</span>，客户访问不同的服务器端程序* 优点：<span class="token number">1</span>. 开发、安装，部署，维护 简单* 缺点：<span class="token number">1</span>. 如果应用过大，用户的体验可能会受到影响<span class="token number">2</span>. 对硬件要求过高<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="B-S架构详解"><a href="#B-S架构详解" class="headerlink" title="B/S架构详解"></a>B/S架构详解</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* 资源分类：<span class="token number">1</span>. 静态资源：* 使用静态网页开发技术发布的资源。* 特点：* 所有用户访问，得到的结果是一样的。* 如：文本，图片，音频、视频, HTML,CSS,JavaScript* 如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器。浏览器中内置了静态资源的解析引擎，可以展示静态资源<span class="token number">2</span>. 动态资源：* 使用动态网页及时发布的资源。* 特点：* 所有用户访问，得到的结果可能不一样。* 如：jsp/servlet,php,asp<span class="token punctuation">..</span>.* 如果用户请求的是动态资源，那么服务器会执行动态资源，转换为静态资源，再发送给浏览器* 我们要学习动态资源，必须先学习静态资源！* 静态资源：* HTML：用于搭建基础网页，展示页面的内容* CSS：用于美化页面，布局页面* JavaScript：控制页面的元素，让页面有一些动态的效果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><ol><li><h5 id="概念：是最基础的网页开发语言"><a href="#概念：是最基础的网页开发语言" class="headerlink" title="概念：是最基础的网页开发语言"></a>概念：是最基础的网页开发语言</h5><ul><li>Hyper Text Markup Language 超文本标记语言<ul><li>超文本:<ul><li>超文本是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本.</li></ul></li><li>标记语言:<ul><li>由标签构成的语言。&lt;标签名称&gt; 如 html，xml</li><li>标记语言不是编程语言</li></ul></li></ul></li></ul></li><li><h5 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h5><ul><li><h6 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h6></li></ul><ol><li><p>html文档后缀名 .html 或者 .htm</p><ol start="2"><li><p>标签分为</p><ol><li>围堵标签：有开始标签和结束标签。如  </li><li>自闭和标签：开始标签和结束标签在一起。如 <br></li></ol></li><li><p>标签可以嵌套：</p><pre><code> 需要正确嵌套，不能你中有我，我中有你 错误：&lt;a&gt;&lt;b&gt;&lt;/a&gt;&lt;/b&gt; 正确：&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;</code></pre></li><li><p>在开始标签中可以定义属性。属性是由键值对构成，值需要用引号(单双都可)引起来</p></li><li><p>html的标签不区分大小写，但是建议使用小写。</p></li></ol></li></ol><ul><li><h6 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h6>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>​<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>​<span class="token operator">&lt;</span>FONT <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">'red'</span><span class="token operator">&gt;</span>Hello World<span class="token operator">&lt;</span>/font<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>​​<span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">'green'</span><span class="token operator">&gt;</span>Hello World<span class="token operator">&lt;</span>/font<span class="token operator">&gt;</span>​​<span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><ol start="3"><li><h6 id="标签学习："><a href="#标签学习：" class="headerlink" title="标签学习："></a>标签学习：</h6><ol><li><h6 id="文件标签：构成html最基本的标签"><a href="#文件标签：构成html最基本的标签" class="headerlink" title="文件标签：构成html最基本的标签"></a>文件标签：构成html最基本的标签</h6><ul><li>html:html文档的根标签</li><li>head：头标签。用于指定html文档的一些属性。引入外部的资源</li><li>title：标题标签。</li><li>body：体标签</li><li>：html5中定义该文档是html文档</li></ul></li><li><h6 id="文本标签：和文本有关的标签"><a href="#文本标签：和文本有关的标签" class="headerlink" title="文本标签：和文本有关的标签"></a>文本标签：和文本有关的标签</h6><ul><li><ul><li><pre><code class="bash">  注释：&lt;!-- 注释内容 --&gt;  <pre class="line-numbers language-none"><code class="language-none">* &lt;h1&gt; to &lt;h6&gt;：标题标签  * h1~h6:字体大小逐渐递减* &lt;p&gt;：段落标签* &lt;br&gt;：换行标签* &lt;hr&gt;：展示一条水平线  * 属性：  * color：颜色  * width：宽度  * size：高度  * align：对其方式  * center：居中  * left：左对齐  * right：右对齐* &lt;b&gt;：字体加粗* &lt;i&gt;：字体斜体* &lt;font&gt;:字体标签* &lt;center&gt;:文本居中  * 属性：  * color：颜色  * size：大小  * face：字体* 属性定义：  * color：    1. 英文单词：red,green,blue    2. rgb(值1，值2，值3)：值的范围：0~255  如  rgb(0,0,255)    3. #值1值2值3：值的范围：00~FF之间。如： #FF00FF  * width：    1. 数值：           width='20' ,数值的单位，默认是 px(像素)        2. 数值%：占比相对于父元素的比例```bash3. 图片标签：* img：展示图片* 属性：* src：指定图片的位置* 代码： &lt;!--展示一张图片 img--&gt;    &lt;img src="image/jingxuan_2.jpg" align="right" alt="古镇" width="500" height="500"/&gt;    &lt;!--        相对路径            * 以.开头的路径                * ./：代表当前目录  ./image/1.jpg                * ../:代表上一级目录     --&gt;    &lt;img src="./image/jiangwai_1.jpg"&gt;    &lt;img src="../image/jiangwai_1.jpg"&gt;4. 列表标签：* 有序列表：* ol:* li:* 无序列表：* ul:* li:5. 链接标签：* a:定义一个超链接* 属性：* href：指定访问资源的URL(统一资源定位符)* target：指定打开资源的方式* _self:默认值，在当前页面打开* _blank：在空白页面打开* 代码： &lt;!--超链接  a--&gt;    &lt;a href="http://www.itcast.cn"&gt;点我&lt;/a&gt;    &lt;br&gt;    &lt;a href="http://www.itcast.cn" target="_self"&gt;点我&lt;/a&gt;    &lt;br&gt;    &lt;a href="http://www.itcast.cn" target="_blank"&gt;点我&lt;/a&gt;    &lt;br&gt;    &lt;a href="./5_列表标签.html"&gt;列表标签&lt;/a&gt;&lt;br&gt;    &lt;a href="mailto:itcast@itcast.cn"&gt;联系我们&lt;/a&gt;    &lt;br&gt;    &lt;a href="http://www.itcast.cn"&gt;&lt;img src="image/jiangwai_1.jpg"&gt;&lt;/a&gt;6. div和span：* div:每一个div占满一整行。块级标签    * span：文本信息在一行展示，行内标签 内联标签7. 语义化标签：html5中为了提高程序的可读性，提供了一些标签。1. &lt;header&gt;：页眉2. &lt;footer&gt;：页脚<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li></ul></li></ol></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">8</span>. 表格标签：* table：定义表格* width：宽度* border：边框* cellpadding：定义内容和单元格的距离* cellspacing：定义单元格之间的距离。如果指定为0，则单元格的线会合为一条、* bgcolor：背景色* align：对齐方式* tr：定义行* bgcolor：背景色* align：对齐方式* td：定义单元格* colspan：合并列* rowspan：合并行* th：定义表头单元格* <span class="token operator">&lt;</span>caption<span class="token operator">&gt;</span>：表格标题* <span class="token operator">&lt;</span>thead<span class="token operator">&gt;</span>：表示表格的头部分* <span class="token operator">&lt;</span>tbody<span class="token operator">&gt;</span>：表示表格的体部分* <span class="token operator">&lt;</span>tfoot<span class="token operator">&gt;</span>：表示表格的脚部分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="案例：旅游网站首页"><a href="#案例：旅游网站首页" class="headerlink" title="案例：旅游网站首页"></a>案例：旅游网站首页</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 确定使用table来完成布局<span class="token number">2</span>. 如果某一行只有一个单元格，则使用<span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span><span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span><span class="token number">3</span>. 如果某一行有多个单元格，则使用<span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span><span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span>table<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/table<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span><span class="token number">4</span>. 代码实现<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html <span class="token assign-left variable">lang</span><span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>旅游网<span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span>--采用table来完成布局--<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span>--最外层的table，用于整个页面的布局--<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>table <span class="token assign-left variable">width</span><span class="token operator">=</span><span class="token string">"100%"</span> <span class="token assign-left variable">align</span><span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">!</span>-- 第1行 --<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/top_banner.jpg"</span> <span class="token assign-left variable">width</span><span class="token operator">=</span><span class="token string">"100%"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 第2行 --<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>table <span class="token assign-left variable">width</span><span class="token operator">=</span><span class="token string">"100%"</span> <span class="token assign-left variable">align</span><span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/logo.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/search.png"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/hotel_tel.png"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>/table<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 第3行 --<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>table <span class="token assign-left variable">width</span><span class="token operator">=</span><span class="token string">"100%"</span> <span class="token assign-left variable">align</span><span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>tr <span class="token assign-left variable">bgcolor</span><span class="token operator">=</span><span class="token string">"#ffd700"</span> <span class="token assign-left variable">align</span><span class="token operator">=</span><span class="token string">"center"</span> <span class="token assign-left variable">height</span><span class="token operator">=</span><span class="token string">"45"</span> <span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>a <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>首页<span class="token operator">&lt;</span>/a<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            门票                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            门票                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            门票                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            门票                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            门票                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            门票                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            门票                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            门票                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            门票                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>/table<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 第4行 轮播图 --<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/banner_3.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span> <span class="token assign-left variable">width</span><span class="token operator">=</span><span class="token string">"100%"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 第5行 精选--<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/icon_5.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                精选                <span class="token operator">&lt;</span>hr  <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"#ffd700"</span> <span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 第6行 --<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>table <span class="token assign-left variable">align</span><span class="token operator">=</span><span class="token string">"center"</span> <span class="token assign-left variable">width</span><span class="token operator">=</span><span class="token string">"95%"</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/jiangxuan_1.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上海飞三亚五天4晚自由行<span class="token punctuation">(</span>春节销售+亲子+蜜月+自由行<span class="token punctuation">)</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">&gt;&amp;</span>yen<span class="token punctuation">;</span> <span class="token number">89</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>/font<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/jiangxuan_1.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上海飞三亚五天4晚自由行<span class="token punctuation">(</span>春节销售+亲子+蜜月+自由行<span class="token punctuation">)</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">&gt;&amp;</span>yen<span class="token punctuation">;</span> <span class="token number">89</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>/font<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/jiangxuan_1.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上海飞三亚五天4晚自由行<span class="token punctuation">(</span>春节销售+亲子+蜜月+自由行<span class="token punctuation">)</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">&gt;&amp;</span>yen<span class="token punctuation">;</span> <span class="token number">89</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>/font<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/jiangxuan_1.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上海飞三亚五天4晚自由行<span class="token punctuation">(</span>春节销售+亲子+蜜月+自由行<span class="token punctuation">)</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">&gt;&amp;</span>yen<span class="token punctuation">;</span> <span class="token number">89</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>/font<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>/table<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 第7行 国内游 --<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/icon_6.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                国内游                <span class="token operator">&lt;</span>hr  <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"#ffd700"</span> <span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 第8行 --<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>table <span class="token assign-left variable">align</span><span class="token operator">=</span><span class="token string">"center"</span> <span class="token assign-left variable">width</span><span class="token operator">=</span><span class="token string">"95%"</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">rowspan</span><span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/guonei_1.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/jiangxuan_2.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span> <span class="token assign-left variable">height</span><span class="token operator">=</span><span class="token string">"100%"</span><span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上海飞三亚五天4晚自由行<span class="token punctuation">(</span>春节销售+亲子+蜜月+自由行<span class="token punctuation">)</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">&gt;&amp;</span>yen<span class="token punctuation">;</span> <span class="token number">69</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>/font<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/jiangxuan_2.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上海飞三亚五天4晚自由行<span class="token punctuation">(</span>春节销售+亲子+蜜月+自由行<span class="token punctuation">)</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">&gt;&amp;</span>yen<span class="token punctuation">;</span> <span class="token number">69</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>/font<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/jiangxuan_2.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上海飞三亚五天4晚自由行<span class="token punctuation">(</span>春节销售+亲子+蜜月+自由行<span class="token punctuation">)</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">&gt;&amp;</span>yen<span class="token punctuation">;</span> <span class="token number">69</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>/font<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/jiangxuan_2.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上海飞三亚五天4晚自由行<span class="token punctuation">(</span>春节销售+亲子+蜜月+自由行<span class="token punctuation">)</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">&gt;&amp;</span>yen<span class="token punctuation">;</span> <span class="token number">69</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>/font<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/jiangxuan_2.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上海飞三亚五天4晚自由行<span class="token punctuation">(</span>春节销售+亲子+蜜月+自由行<span class="token punctuation">)</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">&gt;&amp;</span>yen<span class="token punctuation">;</span> <span class="token number">69</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>/font<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/jiangxuan_2.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上海飞三亚五天4晚自由行<span class="token punctuation">(</span>春节销售+亲子+蜜月+自由行<span class="token punctuation">)</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">&gt;&amp;</span>yen<span class="token punctuation">;</span> <span class="token number">69</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>/font<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">            <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/table<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 第9行 境外游 --<span class="token operator">&gt;</span><span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/icon_7.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>        境外游        <span class="token operator">&lt;</span>hr  <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"#ffd700"</span> <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 第10行 --<span class="token operator">&gt;</span><span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>table <span class="token assign-left variable">align</span><span class="token operator">=</span><span class="token string">"center"</span> <span class="token assign-left variable">width</span><span class="token operator">=</span><span class="token string">"95%"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td <span class="token assign-left variable">rowspan</span><span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/jiangwai_1.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/jiangxuan_3.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span> <span class="token assign-left variable">height</span><span class="token operator">=</span><span class="token string">"100%"</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上海飞三亚五天4晚自由行<span class="token punctuation">(</span>春节销售+亲子+蜜月+自由行<span class="token punctuation">)</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">&gt;&amp;</span>yen<span class="token punctuation">;</span> <span class="token number">69</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>/font<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/jiangxuan_3.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上海飞三亚五天4晚自由行<span class="token punctuation">(</span>春节销售+亲子+蜜月+自由行<span class="token punctuation">)</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">&gt;&amp;</span>yen<span class="token punctuation">;</span> <span class="token number">69</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>/font<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/jiangxuan_3.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上海飞三亚五天4晚自由行<span class="token punctuation">(</span>春节销售+亲子+蜜月+自由行<span class="token punctuation">)</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">&gt;&amp;</span>yen<span class="token punctuation">;</span> <span class="token number">69</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>/font<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/jiangxuan_3.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上海飞三亚五天4晚自由行<span class="token punctuation">(</span>春节销售+亲子+蜜月+自由行<span class="token punctuation">)</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">&gt;&amp;</span>yen<span class="token punctuation">;</span> <span class="token number">69</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>/font<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/jiangxuan_3.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上海飞三亚五天4晚自由行<span class="token punctuation">(</span>春节销售+亲子+蜜月+自由行<span class="token punctuation">)</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">&gt;&amp;</span>yen<span class="token punctuation">;</span> <span class="token number">69</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>/font<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>                   <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/jiangxuan_3.jpg"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>上海飞三亚五天4晚自由行<span class="token punctuation">(</span>春节销售+亲子+蜜月+自由行<span class="token punctuation">)</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">&gt;&amp;</span>yen<span class="token punctuation">;</span> <span class="token number">69</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>/font<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">                <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>/table<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 第11行 --<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"image/footer_service.png"</span> <span class="token assign-left variable">alt</span><span class="token operator">=</span><span class="token string">""</span> <span class="token assign-left variable">width</span><span class="token operator">=</span><span class="token string">"100%"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 第12行 --<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>td <span class="token assign-left variable">align</span><span class="token operator">=</span><span class="token string">"center"</span> <span class="token assign-left variable">bgcolor</span><span class="token operator">=</span><span class="token string">"#ffd700"</span> <span class="token assign-left variable">height</span><span class="token operator">=</span><span class="token string">"40"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>font <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token string">"gray"</span> <span class="token assign-left variable">size</span><span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">&gt;</span>                      版权所有Copyright <span class="token number">2006</span>-2018<span class="token operator">&amp;</span>copy<span class="token punctuation">;</span>, All Rights Reserved 苏ICP备16007882            <span class="token operator">&lt;</span>/font<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>/table<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记</title>
      <link href="posts/17c7b154.html"/>
      <url>posts/17c7b154.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> JavaScript：<br>    * 概念：    一门客户端脚本语言<br>        * 运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎<br>        * 脚本语言：不需要编译，直接就可以被浏览器解析执行了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* 功能：* 可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。* JavaScript发展史：<span class="token number">1</span>. <span class="token number">1992</span>年，Nombase公司，开发出第一门客户端脚本语言，专门用于表单的校验。命名为 ： C--，后来更名为：ScriptEase<span class="token number">2</span>. <span class="token number">1995</span>年，Netscape<span class="token punctuation">(</span>网景<span class="token punctuation">)</span>公司，开发了一门客户端脚本语言：LiveScript。后来，请来SUN公司的专家，修改LiveScript，命名为JavaScript<span class="token number">3</span>. <span class="token number">1996</span>年，微软抄袭JavaScript开发出JScript语言<span class="token number">4</span>. <span class="token number">1997</span>年，ECMA<span class="token punctuation">(</span>欧洲计算机制造商协会<span class="token punctuation">)</span>，制定出客户端脚本语言的标准：ECMAScript，就是统一了所有客户端脚本语言的编码方式。* JavaScript <span class="token operator">=</span> ECMAScript + JavaScript自己特有的东西<span class="token punctuation">(</span>BOM+DOM<span class="token punctuation">)</span>* ECMAScript：客户端脚本语言的标准<span class="token number">1</span>. 基本语法：<span class="token number">1</span>. 与html结合方式<span class="token number">1</span>. 内部JS：* 定义<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>，标签体内容就是js代码<span class="token number">2</span>. 外部JS：* 定义<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>，通过src属性引入外部的js文件* 注意：<span class="token number">1</span>. <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>可以定义在html页面的任何地方。但是定义的位置会影响执行顺序。<span class="token number">2</span>. <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>可以定义多个。<span class="token number">2</span>. 注释<span class="token number">1</span>. 单行注释：//注释内容<span class="token number">2</span>. 多行注释：/*注释内容*/<span class="token number">3</span>. 数据类型：<span class="token number">1</span>. 原始数据类型<span class="token punctuation">(</span>基本数据类型<span class="token punctuation">)</span>：<span class="token number">1</span>. number：数字。 整数/小数/NaN<span class="token punctuation">(</span>not a number 一个不是数字的数字类型<span class="token punctuation">)</span><span class="token number">2</span>. string：字符串。 字符串  <span class="token string">"abc"</span> <span class="token string">"a"</span> <span class="token string">'abc'</span><span class="token number">3</span>. boolean: true和false<span class="token number">4</span>. null：一个对象为空的占位符<span class="token number">5</span>. undefined：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined<span class="token number">2</span>. 引用数据类型：对象<span class="token number">4</span>. 变量* 变量：一小块存储数据的内存空间* Java语言是强类型语言，而JavaScript是弱类型语言。* 强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据* 弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。* 语法：* var 变量名 <span class="token operator">=</span> 初始化值<span class="token punctuation">;</span>* typeof运算符：获取变量的类型。* 注：null运算后得到的是object<span class="token number">5</span>. 运算符<span class="token number">1</span>. 一元运算符：只有一个运算数的运算符++，-- ， +<span class="token punctuation">(</span>正号<span class="token punctuation">)</span>  * ++ --: 自增<span class="token punctuation">(</span>自减<span class="token punctuation">)</span>* ++<span class="token punctuation">(</span>--<span class="token punctuation">)</span> 在前，先自增<span class="token punctuation">(</span>自减<span class="token punctuation">)</span>，再运算* ++<span class="token punctuation">(</span>--<span class="token punctuation">)</span> 在后，先运算，再自增<span class="token punctuation">(</span>自减<span class="token punctuation">)</span>* +<span class="token punctuation">(</span>-<span class="token punctuation">)</span>：正负号    * 注意：在JS中，如果运算数不是运算符所要求的类型，那么js引擎会自动的将运算数进行类型转换                    * 其他类型转number：                        * string转number：按照字面值转换。如果字面值不是数字，则转为NaN（不是数字的数字）                        * boolean转number：true转为1，false转为0<span class="token number">2</span>. 算数运算符+ - * / % <span class="token punctuation">..</span>.<span class="token number">3</span>. 赋值运算符<span class="token operator">=</span> <span class="token operator">+=</span> -+<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token number">4</span>. 比较运算符<span class="token operator">&gt;</span> <span class="token operator">&lt;</span> <span class="token operator">&gt;</span><span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">=</span> <span class="token operator">==</span> <span class="token operator">==</span><span class="token operator">=</span><span class="token punctuation">(</span>全等于<span class="token punctuation">)</span>* 比较方式                  <span class="token number">1</span>. 类型相同：直接比较                      * 字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止。                  <span class="token number">2</span>. 类型不同：先进行类型转换，再比较                      * <span class="token operator">==</span><span class="token operator">=</span>：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">5</span>. 逻辑运算符<span class="token operator">&amp;&amp;</span> <span class="token operator">||</span> <span class="token operator">!</span>* 其他类型转boolean：                 <span class="token number">1</span>. number：0或NaN为假，其他为真                 <span class="token number">2</span>. string：除了空字符串<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>，其他都是true                 <span class="token number">3</span>. null<span class="token operator">&amp;</span>undefined:都是false                 <span class="token number">4</span>. 对象：所有对象都为true<span class="token number">6</span>. 三元运算符? <span class="token builtin class-name">:</span> 表达式var a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        var b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        var c <span class="token operator">=</span> a <span class="token operator">&gt;</span> b ? <span class="token number">1</span>:0<span class="token punctuation">;</span>* 语法：* 表达式? 值1:值2<span class="token punctuation">;</span>* 判断表达式的值，如果是true则取值1，如果是false则取值2；<span class="token number">6</span>. 流程控制语句：<span class="token number">1</span>. if<span class="token punctuation">..</span>.else<span class="token punctuation">..</span>.<span class="token number">2</span>. switch:* 在java中，switch语句可以接受的数据类型： byte int shor char,枚举<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span> ,String<span class="token punctuation">(</span><span class="token number">1.7</span><span class="token punctuation">)</span>* switch<span class="token punctuation">(</span>变量<span class="token punctuation">)</span>:<span class="token keyword">case</span> 值:* 在JS中,switch语句可以接受任意的原始数据类型<span class="token number">3</span>. <span class="token keyword">while</span><span class="token number">4</span>. do<span class="token punctuation">..</span>.while<span class="token number">5</span>. <span class="token keyword">for</span><span class="token number">7</span>. JS特殊语法：<span class="token number">1</span>. 语句以<span class="token punctuation">;</span>结尾，如果一行只有一条语句则 <span class="token punctuation">;</span>可以省略 <span class="token punctuation">(</span>不建议<span class="token punctuation">)</span><span class="token number">2</span>. 变量的定义使用var关键字，也可以不使用      * 用： 定义的变量是局部变量              * 不用：定义的变量是全局变量<span class="token punctuation">(</span>不建议<span class="token punctuation">)</span><span class="token number">8</span>. 练习：99乘法表<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html <span class="token assign-left variable">lang</span><span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span class="token number">99</span>乘法表<span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        td<span class="token punctuation">{</span>            border: 1px solid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span>/style<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        document.write<span class="token punctuation">(</span><span class="token string">"&lt;table  align='center'&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​            </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">        //1.完成基本的for循环嵌套，展示乘法表        <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token operator">=</span> <span class="token number">9</span> <span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            document.write<span class="token punctuation">(</span><span class="token string">"&lt;tr&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>var j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span><span class="token operator">=</span>i <span class="token punctuation">;</span> j++<span class="token punctuation">)</span> <span class="token punctuation">{</span>                document.write<span class="token punctuation">(</span><span class="token string">"&lt;td&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                //输出  <span class="token number">1</span> * <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>                document.write<span class="token punctuation">(</span>i + <span class="token string">" * "</span> + j + <span class="token string">" = "</span> + <span class="token punctuation">(</span> i*j<span class="token punctuation">)</span> +<span class="token string">"&amp;nbsp;&amp;nbsp;&amp;nbsp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                document.write<span class="token punctuation">(</span><span class="token string">"&lt;/td&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            /*//输出换行            document.write<span class="token punctuation">(</span><span class="token string">"&lt;br&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>*/            document.write<span class="token punctuation">(</span><span class="token string">"&lt;/tr&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //2.完成表格嵌套        document.write<span class="token punctuation">(</span><span class="token string">"&lt;/table&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span>/script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span><span class="token number">2</span>. 基本对象：<span class="token number">1</span>. Function：函数<span class="token punctuation">(</span>方法<span class="token punctuation">)</span>对象           <span class="token number">1</span>. 创建：               <span class="token number">1</span>. var fun <span class="token operator">=</span> new Function<span class="token punctuation">(</span>形式参数列表,方法体<span class="token punctuation">)</span><span class="token punctuation">;</span>  //忘掉吧               <span class="token number">2</span>.                    <span class="token keyword">function</span> 方法名称<span class="token punctuation">(</span>形式参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>                       方法体                   <span class="token punctuation">}</span>               <span class="token number">3</span>.                   var 方法名 <span class="token operator">=</span> function<span class="token punctuation">(</span>形式参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>                       方法体                  <span class="token punctuation">}</span>           <span class="token number">2</span>. 方法：           <span class="token number">3</span>. 属性：               length:代表形参的个数           <span class="token number">4</span>. 特点：               <span class="token number">1</span>. 方法定义是，形参的类型不用写,返回值类型也不写。               <span class="token number">2</span>. 方法是一个对象，如果定义名称相同的方法，会覆盖               <span class="token number">3</span>. 在JS中，方法的调用只与方法的名称有关，和参数列表无关               <span class="token number">4</span>. 在方法声明中有一个隐藏的内置对象（数组），arguments,封装所有的实际参数           <span class="token number">5</span>. 调用：               方法名称<span class="token punctuation">(</span>实际参数列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span>. Array:数组对象           <span class="token number">1</span>. 创建：               <span class="token number">1</span>. var arr <span class="token operator">=</span> new Array<span class="token punctuation">(</span>元素列表<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token number">2</span>. var arr <span class="token operator">=</span> new Array<span class="token punctuation">(</span>默认长度<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token number">3</span>. var arr <span class="token operator">=</span> <span class="token punctuation">[</span>元素列表<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token number">2</span>. 方法               join<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>:将数组中的元素按照指定的分隔符拼接为字符串               push<span class="token punctuation">(</span><span class="token punctuation">)</span>向数组的末尾添加一个或更多元素，并返回新的长度。           <span class="token number">3</span>. 属性               length:数组的长度           <span class="token number">4</span>. 特点：               <span class="token number">1</span>. JS中，数组元素的类型可变的。               <span class="token number">2</span>. JS中，数组长度可变的。<span class="token number">3</span>. Boolean<span class="token number">4</span>. Date：日期对象           <span class="token number">1</span>. 创建：               var <span class="token function">date</span> <span class="token operator">=</span> new Date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token number">2</span>. 方法：               toLocaleString<span class="token punctuation">(</span><span class="token punctuation">)</span>：返回当前date对象对应的时间本地字符串格式               getTime<span class="token punctuation">(</span><span class="token punctuation">)</span>:获取毫秒值。返回当前如期对象描述的时间到1970年1月1日零点的毫秒值差<span class="token number">5</span>. Math：数学对象           <span class="token number">1</span>. 创建：               * 特点：Math对象不用创建，直接使用。  Math.方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token number">2</span>. 方法：               random<span class="token punctuation">(</span><span class="token punctuation">)</span>:返回 <span class="token number">0</span> ~ <span class="token number">1</span> 之间的随机数。 含0不含1               ceil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>：对数进行上舍入。               floor<span class="token punctuation">(</span>x<span class="token punctuation">)</span>：对数进行下舍入。               round<span class="token punctuation">(</span>x<span class="token punctuation">)</span>：把数四舍五入为最接近的整数。           <span class="token number">3</span>. 属性：               PI<span class="token number">6</span>. Number<span class="token number">7</span>. String<span class="token number">8</span>. RegExp：正则表达式对象<span class="token number">1</span>. 正则表达式：定义字符串的组成规则。<span class="token number">1</span>. 单个字符:<span class="token punctuation">[</span><span class="token punctuation">]</span>如： <span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token punctuation">[</span>ab<span class="token punctuation">]</span> <span class="token punctuation">[</span>a-zA-Z0-9_<span class="token punctuation">]</span>* 特殊符号代表特殊含义的单个字符:<span class="token punctuation">\</span>d:单个数字字符 <span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span><span class="token punctuation">\</span>w:单个单词字符<span class="token punctuation">[</span>a-zA-Z0-9_<span class="token punctuation">]</span><span class="token number">2</span>. 量词符号：?：表示出现0次或1次*：表示出现0次或多次+：出现1次或多次<span class="token punctuation">{</span>m,n<span class="token punctuation">}</span>:表示 m<span class="token operator">&lt;</span><span class="token operator">=</span> 数量 <span class="token operator">&lt;</span><span class="token operator">=</span> n* m如果缺省： <span class="token punctuation">{</span>,n<span class="token punctuation">}</span>:最多n次* n如果缺省：<span class="token punctuation">{</span>m,<span class="token punctuation">}</span> 最少m次<span class="token number">3</span>. 开始结束符号* ^:开始* $:结束<span class="token number">2</span>. 正则对象：<span class="token number">1</span>. 创建<span class="token number">1</span>. var reg <span class="token operator">=</span> new RegExp<span class="token punctuation">(</span><span class="token string">"正则表达式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span>. var reg <span class="token operator">=</span> /正则表达式/<span class="token punctuation">;</span><span class="token number">2</span>. 方法<span class="token number">1</span>. test<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>:验证指定的字符串是否符合正则定义的规范<span class="token number">9</span>. Global<span class="token number">1</span>. 特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。  方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span>. 方法：    encodeURI<span class="token punctuation">(</span><span class="token punctuation">)</span>:url编码    decodeURI<span class="token punctuation">(</span><span class="token punctuation">)</span>:url解码    encodeURIComponent<span class="token punctuation">(</span><span class="token punctuation">)</span>:url编码,编码的字符更多    decodeURIComponent<span class="token punctuation">(</span><span class="token punctuation">)</span>:url解码    parseInt<span class="token punctuation">(</span><span class="token punctuation">)</span>:将字符串转为数字        * 逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number    isNaN<span class="token punctuation">(</span><span class="token punctuation">)</span>:判断一个值是否是NaN        * NaN六亲不认，连自己都不认。NaN参与的<span class="token operator">==</span>比较全部问false    eval<span class="token punctuation">(</span><span class="token punctuation">)</span>:讲 JavaScript 字符串，并把它作为脚本代码来执行。           <span class="token number">3</span>. URL编码             <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>JavaScript：<pre><code> 1. ECMAScript： 2. BOM： 3. DOM：     1. 事件</code></pre></li></ol><h2 id="DOM简单学习"><a href="#DOM简单学习" class="headerlink" title="DOM简单学习"></a>DOM简单学习</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* 功能：控制html文档的内容* 获取页面标签<span class="token punctuation">(</span>元素<span class="token punctuation">)</span>对象：Element* document.getElementById<span class="token punctuation">(</span><span class="token string">"id值"</span><span class="token punctuation">)</span>:通过元素的id获取元素对象* 操作Element对象：<span class="token number">1</span>. 修改属性值：<span class="token number">1</span>. 明确获取的对象是哪一个？<span class="token number">2</span>. 查看API文档，找其中有哪些属性可以设置<span class="token number">2</span>. 修改标签体内容：* 属性：innerHTML<span class="token number">1</span>. 获取元素对象<span class="token number">2</span>. 使用innerHTML属性修改标签体内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件简单学习"><a href="#事件简单学习" class="headerlink" title="事件简单学习"></a>事件简单学习</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* 功能： 某些组件被执行了某些操作后，触发某些代码的执行。* 造句：  xxx被xxx,我就xxx* 我方水晶被摧毁后，我就责备对友。* 敌方水晶被摧毁后，我就夸奖自己。* 如何绑定事件<span class="token number">1</span>. 直接在html标签上，指定事件的属性<span class="token punctuation">(</span>操作<span class="token punctuation">)</span>，属性值就是js代码<span class="token number">1</span>. 事件：onclick--- 单击事件<span class="token number">2</span>. 通过js获取元素对象，指定事件属性，设置一个函数* 代码：<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>img <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"light"</span> <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"img/off.gif"</span>  <span class="token assign-left variable">onclick</span><span class="token operator">=</span><span class="token string">"fun();"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>img <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"light2"</span> <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"img/off.gif"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">function</span> <span class="token function-name function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        alert<span class="token punctuation">(</span><span class="token string">'我被点了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        alert<span class="token punctuation">(</span><span class="token string">'我又被点了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-name function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        alert<span class="token punctuation">(</span><span class="token string">'咋老点我？'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //1.获取light2对象    var light2 <span class="token operator">=</span> document.getElementById<span class="token punctuation">(</span><span class="token string">"light2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //2.绑定事件    light2.onclick <span class="token operator">=</span> fun2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​                </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>/script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span>* 案例1：电灯开关<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html <span class="token assign-left variable">lang</span><span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>电灯开关<span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>img <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"light"</span> <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"img/off.gif"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    /*        分析：            <span class="token number">1</span>.获取图片对象            <span class="token number">2</span>.绑定单击事件            <span class="token number">3</span>.每次点击切换图片                * 规则：                    * 如果灯是开的 on,切换图片为 off                    * 如果灯是关的 off,切换图片为 on                * 使用标记flag来完成     */    //1.获取图片对象    var light <span class="token operator">=</span> document.getElementById<span class="token punctuation">(</span><span class="token string">"light"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    var flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>//代表灯是灭的。 off图片    //2.绑定单击事件    light.onclick <span class="token operator">=</span> <span class="token function-name function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        if<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>//判断如果灯是开的，则灭掉            light.src <span class="token operator">=</span> <span class="token string">"img/off.gif"</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>else<span class="token punctuation">{</span>            //如果灯是灭的，则打开            light.src <span class="token operator">=</span> <span class="token string">"img/on.gif"</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token punctuation">}</span>    <span class="token operator">&lt;</span>/script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM:"></a>BOM:</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 概念：Browser Object Model 浏览器对象模型* 将浏览器的各个组成部分封装成对象。<span class="token number">2</span>. 组成：* Window：窗口对象* Navigator：浏览器对象* Screen：显示器屏幕对象* History：历史记录对象* Location：地址栏对象<span class="token number">3</span>. Window：窗口对象    <span class="token number">1</span>. 创建    <span class="token number">2</span>. 方法         <span class="token number">1</span>. 与弹出框有关的方法：            alert<span class="token punctuation">(</span><span class="token punctuation">)</span>显示带有一段消息和一个确认按钮的警告框。            confirm<span class="token punctuation">(</span><span class="token punctuation">)</span>显示带有一段消息以及确认按钮和取消按钮的对话框。                * 如果用户点击确定按钮，则方法返回true                * 如果用户点击取消按钮，则方法返回false            prompt<span class="token punctuation">(</span><span class="token punctuation">)</span>显示可提示用户输入的对话框。                * 返回值：获取用户输入的值         <span class="token number">2</span>. 与打开关闭有关的方法：            close<span class="token punctuation">(</span><span class="token punctuation">)</span>关闭浏览器窗口。                * 谁调用我 ，我关谁            open<span class="token punctuation">(</span><span class="token punctuation">)</span>打开一个新的浏览器窗口                * 返回新的Window对象         <span class="token number">3</span>. 与定时器有关的方式            setTimeout<span class="token punctuation">(</span><span class="token punctuation">)</span>在指定的毫秒数后调用函数或计算表达式。                * 参数：                    <span class="token number">1</span>. js代码或者方法对象                    <span class="token number">2</span>. 毫秒值                * 返回值：唯一标识，用于取消定时器            clearTimeout<span class="token punctuation">(</span><span class="token punctuation">)</span>取消由 setTimeout<span class="token punctuation">(</span><span class="token punctuation">)</span> 方法设置的 timeout。            setInterval<span class="token punctuation">(</span><span class="token punctuation">)</span>按照指定的周期（以毫秒计）来调用函数或计算表达式。            clearInterval<span class="token punctuation">(</span><span class="token punctuation">)</span>取消由 setInterval<span class="token punctuation">(</span><span class="token punctuation">)</span> 设置的 timeout。    <span class="token number">3</span>. 属性：        <span class="token number">1</span>. 获取其他BOM对象：            <span class="token function">history</span>            location            Navigator            Screen:        <span class="token number">2</span>. 获取DOM对象            document    <span class="token number">4</span>. 特点        * Window对象不需要创建可以直接使用 window使用。 window.方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        * window引用可以省略。  方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">4</span>. Location：地址栏对象<span class="token number">1</span>. 创建<span class="token punctuation">(</span>获取<span class="token punctuation">)</span>：<span class="token number">1</span>. window.location<span class="token number">2</span>. location<span class="token number">2</span>. 方法：* reload<span class="token punctuation">(</span><span class="token punctuation">)</span>重新加载当前文档。刷新<span class="token number">3</span>. 属性* href设置或返回完整的 URL。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">5</span>. History：历史记录对象    <span class="token number">1</span>. 创建<span class="token punctuation">(</span>获取<span class="token punctuation">)</span>：        <span class="token number">1</span>. window.history        <span class="token number">2</span>. <span class="token function">history</span>    <span class="token number">2</span>. 方法：        * back<span class="token punctuation">(</span><span class="token punctuation">)</span>加载 <span class="token function">history</span> 列表中的前一个 URL。        * forward<span class="token punctuation">(</span><span class="token punctuation">)</span>加载 <span class="token function">history</span> 列表中的下一个 URL。        * go<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>加载 <span class="token function">history</span> 列表中的某个具体页面。            * 参数：                * 正数：前进几个历史记录                * 负数：后退几个历史记录    <span class="token number">3</span>. 属性：        * length返回当前窗口历史列表中的 URL 数量。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM："><a href="#DOM：" class="headerlink" title="DOM："></a>DOM：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* 概念： Document Object Model 文档对象模型* 将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作* W3C DOM 标准被分为 <span class="token number">3</span> 个不同的部分：* 核心 DOM - 针对任何结构化文档的标准模型* Document：文档对象* Element：元素对象* Attribute：属性对象* Text：文本对象* Comment:注释对象* Node：节点对象，其他5个的父对象* XML DOM - 针对 XML 文档的标准模型* HTML DOM - 针对 HTML 文档的标准模型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* 核心DOM模型：* Document：文档对象<span class="token number">1</span>. 创建<span class="token punctuation">(</span>获取<span class="token punctuation">)</span>：在html dom模型中可以使用window对象来获取<span class="token number">1</span>. window.document<span class="token number">2</span>. document<span class="token number">2</span>. 方法：<span class="token number">1</span>. 获取Element对象：<span class="token number">1</span>. getElementById<span class="token punctuation">(</span><span class="token punctuation">)</span>： 根据id属性值获取元素对象。id属性值一般唯一<span class="token number">2</span>. getElementsByTagName<span class="token punctuation">(</span><span class="token punctuation">)</span>：根据元素名称获取元素对象们。返回值是一个数组<span class="token number">3</span>. getElementsByClassName<span class="token punctuation">(</span><span class="token punctuation">)</span>:根据Class属性值获取元素对象们。返回值是一个数组<span class="token number">4</span>. getElementsByName<span class="token punctuation">(</span><span class="token punctuation">)</span>: 根据name属性值获取元素对象们。返回值是一个数组<span class="token number">2</span>. 创建其他DOM对象：createAttribute<span class="token punctuation">(</span>name<span class="token punctuation">)</span>            createComment<span class="token punctuation">(</span><span class="token punctuation">)</span>            createElement<span class="token punctuation">(</span><span class="token punctuation">)</span>            createTextNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">3</span>. 属性* Element：元素对象<span class="token number">1</span>. 获取/创建：通过document来获取和创建<span class="token number">2</span>. 方法：<span class="token number">1</span>. removeAttribute<span class="token punctuation">(</span><span class="token punctuation">)</span>：删除属性<span class="token number">2</span>. setAttribute<span class="token punctuation">(</span><span class="token punctuation">)</span>：设置属性* Node：节点对象，其他5个的父对象* 特点：所有dom对象都可以被认为是一个节点* 方法：* CRUD dom树：* appendChild<span class="token punctuation">(</span><span class="token punctuation">)</span>：向节点的子节点列表的结尾添加新的子节点。* removeChild<span class="token punctuation">(</span><span class="token punctuation">)</span>：删除（并返回）当前节点的指定子节点。* replaceChild<span class="token punctuation">(</span><span class="token punctuation">)</span>：用新节点替换一个子节点。* 属性：* parentNode 返回节点的父节点。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* HTML DOM<span class="token number">1</span>. 标签体的设置和获取：innerHTML<span class="token number">2</span>. 使用html元素对象的属性<span class="token number">3</span>. 控制元素样式<span class="token number">1</span>. 使用元素的style属性来设置如： //修改样式方式1        div1.style.border <span class="token operator">=</span> <span class="token string">"1px solid red"</span><span class="token punctuation">;</span>        div1.style.width <span class="token operator">=</span> <span class="token string">"200px"</span><span class="token punctuation">;</span>        //font-size--<span class="token operator">&gt;</span> fontSize        div1.style.fontSize <span class="token operator">=</span> <span class="token string">"20px"</span><span class="token punctuation">;</span><span class="token number">2</span>. 提前定义好类选择器的样式，通过元素的className属性来设置其class属性值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件监听机制："><a href="#事件监听机制：" class="headerlink" title="事件监听机制："></a>事件监听机制：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* 概念：某些组件被执行了某些操作后，触发某些代码的执行。* 事件：某些操作。如： 单击，双击，键盘按下了，鼠标移动了* 事件源：组件。如： 按钮 文本输入框<span class="token punctuation">..</span>.* 监听器：代码。* 注册监听：将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ban" data-language="ban"><code class="language-ban">* 常见的事件：1. 点击事件：1. onclick：单击事件2. ondblclick：双击事件2. 焦点事件1. onblur：失去焦点2. onfocus:元素获得焦点。3. 加载事件：1. onload：一张页面或一幅图像完成加载。4. 鼠标事件：1. onmousedown鼠标按钮被按下。2. onmouseup鼠标按键被松开。3. onmousemove鼠标被移动。4. onmouseover鼠标移到某元素之上。5. onmouseout鼠标从某元素移开。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​            </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">5</span>. 键盘事件：<span class="token number">1</span>. onkeydown某个键盘按键被按下。<span class="token number">2</span>. onkeyup某个键盘按键被松开。<span class="token number">3</span>. onkeypress某个键盘按键被按下并松开。<span class="token number">6</span>. 选择和改变<span class="token number">1</span>. onchange域的内容被改变。<span class="token number">2</span>. onselect文本被选中。<span class="token number">7</span>. 表单事件：<span class="token number">1</span>. onsubmit确认按钮被点击。<span class="token number">2</span>. onreset重置按钮被点击。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>css的学习笔记</title>
      <link href="posts/1cba0f3c.html"/>
      <url>posts/1cba0f3c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="HTML标签：表单标签"><a href="#HTML标签：表单标签" class="headerlink" title="HTML标签：表单标签"></a>HTML标签：表单标签</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* 表单：* 概念：用于采集用户输入的数据的。用于和服务器进行交互。* form：用于定义表单的。可以定义一个范围，范围代表采集用户数据的范围        * 属性：            * action：指定提交数据的URL            * method:指定提交方式                * 分类：一共7种，2种比较常用                   * get：                        <span class="token number">1</span>. 请求参数会在地址栏中显示。会封装到请求行中<span class="token punctuation">(</span>HTTP协议后讲解<span class="token punctuation">)</span>。                        <span class="token number">2</span>. 请求参数大小是有限制的。                        <span class="token number">3</span>. 不太安全。                   * post：                        <span class="token number">2</span>. 请求参数不会再地址栏中显示。会封装在请求体中<span class="token punctuation">(</span>HTTP协议后讲解<span class="token punctuation">)</span>                        <span class="token number">2</span>. 请求参数的大小没有限制。                        <span class="token number">3</span>. 较为安全。        * 表单项中的数据要想被提交：必须指定其name属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* 表单项标签：* input：可以通过type属性值，改变元素展示的样式* type属性：* text：文本输入框，默认值* placeholder：指定输入框的提示信息，当输入框的内容发生变化，会自动清空提示信息* password：密码输入框* radio:单选框* 注意：<span class="token number">1</span>. 要想让多个单选框实现单选的效果，则多个单选框的name属性值必须一样。<span class="token number">2</span>. 一般会给每一个单选框提供value属性，指定其被选中后提交的值<span class="token number">3</span>. checked属性，可以指定默认值* checkbox：复选框* 注意：<span class="token number">1</span>. 一般会给每一个单选框提供value属性，指定其被选中后提交的值<span class="token number">2</span>. checked属性，可以指定默认值* file：文件选择框* hidden：隐藏域，用于提交一些信息。* 按钮：* submit：提交按钮。可以提交表单* button：普通按钮* image：图片提交按钮* src属性指定图片的路径   * label：指定输入项的文字描述信息   * 注意：   * label的for属性一般会和 input 的 id属性值 对应。如果对应了，则点击label区域，会让input输入框获取焦点。* select: 下拉列表* 子元素：option，指定列表项* textarea：文本域* cols：指定列数，每一行有多少个字符* rows：默认多少行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CSS：页面美化和布局控制"><a href="#CSS：页面美化和布局控制" class="headerlink" title="CSS：页面美化和布局控制"></a>CSS：页面美化和布局控制</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 概念： Cascading Style Sheets 层叠样式表* 层叠：多个样式可以作用在同一个html的元素上，同时生效<span class="token number">2</span>. 好处：<span class="token number">1</span>. 功能强大<span class="token number">2</span>. 将内容展示和样式控制分离* 降低耦合度。解耦* 让分工协作更容易* 提高开发效率<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">3</span>. CSS的使用：CSS与html结合方式<span class="token number">1</span>. 内联样式 * 在标签内使用style属性指定css代码 * 如：<span class="token operator">&lt;</span>div <span class="token assign-left variable">style</span><span class="token operator">=</span><span class="token string">"color:red;"</span><span class="token operator">&gt;</span>hello css<span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span><span class="token number">2</span>. 内部样式* 在head标签内，定义style标签，style标签的标签体内容就是css代码* 如：<span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        div<span class="token punctuation">{</span>            color:blue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span>/style<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>hello css<span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span><span class="token number">3</span>. 外部样式<span class="token number">1</span>. 定义css资源文件。<span class="token number">2</span>. 在head标签内，定义link标签，引入外部的资源文件* 如：    * a.css文件：div<span class="token punctuation">{</span>    color:green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>link <span class="token assign-left variable">rel</span><span class="token operator">=</span><span class="token string">"stylesheet"</span> <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">"css/a.css"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>hello css<span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>hello css<span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>* 注意：* <span class="token number">1,2</span>,3种方式 css作用范围越来越大* <span class="token number">1</span>方式不常用，后期常用2,3* <span class="token number">3</span>种格式可以写为：<span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        @import <span class="token string">"css/a.css"</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span>/style<span class="token operator">&gt;</span><span class="token number">4</span>. css语法：* 格式：选择器 <span class="token punctuation">{</span>属性名1:属性值1<span class="token punctuation">;</span>属性名2:属性值2<span class="token punctuation">;</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span>* 选择器:筛选具有相似特征的元素* 注意：* 每一对属性需要使用；隔开，最后一对属性可以不加；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">5</span>. 选择器：筛选具有相似特征的元素* 分类：<span class="token number">1</span>. 基础选择器<span class="token number">1</span>. id选择器：选择具体的id属性值的元素.建议在一个html页面中id值唯一        * 语法：<span class="token comment">#id属性值{}</span>    <span class="token number">2</span>. 元素选择器：选择具有相同标签名称的元素        * 语法： 标签名称<span class="token punctuation">{</span><span class="token punctuation">}</span>        * 注意：id选择器优先级高于元素选择器    <span class="token number">3</span>. 类选择器：选择具有相同的class属性值的元素。        * 语法：.class属性值<span class="token punctuation">{</span><span class="token punctuation">}</span>        * 注意：类选择器选择器优先级高于元素选择器<span class="token number">2</span>. 扩展选择器：<span class="token number">1</span>. 选择所有元素：* 语法： *<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token number">2</span>. 并集选择器：* 选择器1,选择器2<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token number">3</span>. 子选择器：筛选选择器1元素下的选择器2元素* 语法：  选择器1 选择器2<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token number">4</span>. 父选择器：筛选选择器2的父元素选择器1* 语法：  选择器1 <span class="token operator">&gt;</span> 选择器2<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token number">5</span>. 属性选择器：选择元素名称，属性名<span class="token operator">=</span>属性值的元素* 语法：  元素名称<span class="token punctuation">[</span>属性名<span class="token operator">=</span><span class="token string">"属性值"</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token number">6</span>. 伪类选择器：选择一些元素具有的状态* 语法： 元素:状态<span class="token punctuation">{</span><span class="token punctuation">}</span>* 如： <span class="token operator">&lt;</span>a<span class="token operator">&gt;</span>* 状态：* link：初始化的状态* visited：被访问过的状态* active：正在访问状态* hover：鼠标悬浮状态<span class="token number">6</span>. 属性<span class="token number">1</span>. 字体、文本* font-size：字体大小* color：文本颜色* text-align：对其方式* line-height：行高 <span class="token number">2</span>. 背景* background：<span class="token number">3</span>. 边框* border：设置边框，符合属性<span class="token number">4</span>. 尺寸* width：宽度* height：高度<span class="token number">5</span>. 盒子模型：控制布局* margin：外边距* padding：内边距* 默认情况下内边距会影响整个盒子的大小* box-sizing: border-box<span class="token punctuation">;</span>  设置盒子的属性，让width和height就是最终盒子的大小* float：浮动* left* right<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html <span class="token assign-left variable">lang</span><span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>注册页面<span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>    *<span class="token punctuation">{</span>        margin: 0px<span class="token punctuation">;</span>        padding: 0px<span class="token punctuation">;</span>        box-sizing: border-box<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    body<span class="token punctuation">{</span>        background: url<span class="token punctuation">(</span><span class="token string">"img/register_bg.png"</span><span class="token punctuation">)</span> no-repeat center<span class="token punctuation">;</span>        padding-top: 25px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    .rg_layout<span class="token punctuation">{</span>        width: 900px<span class="token punctuation">;</span>        height: 500px<span class="token punctuation">;</span>        border: 8px solid <span class="token comment">#EEEEEE;</span>        background-color: white<span class="token punctuation">;</span>        /*让div水平居中*/        margin: auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    .rg_left<span class="token punctuation">{</span>        /*border: 1px solid red<span class="token punctuation">;</span>*/        float: left<span class="token punctuation">;</span>        margin: 15px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    .rg_left <span class="token operator">&gt;</span> p:first-child<span class="token punctuation">{</span>        color:<span class="token comment">#FFD026;</span>        font-size: 20px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    .rg_left <span class="token operator">&gt;</span> p:last-child<span class="token punctuation">{</span>        color:<span class="token comment">#A6A6A6;</span>        font-size: 20px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      .rg_center<span class="token punctuation">{</span>        float: left<span class="token punctuation">;</span>       /* border: 1px solid red<span class="token punctuation">;</span>*/    <span class="token punctuation">}</span>    .rg_right<span class="token punctuation">{</span>        /*border: 1px solid red<span class="token punctuation">;</span>*/        float: right<span class="token punctuation">;</span>        margin: 15px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    .rg_right <span class="token operator">&gt;</span> p:first-child<span class="token punctuation">{</span>        font-size: 15px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    .rg_right p a <span class="token punctuation">{</span>        color:pink<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    .td_left<span class="token punctuation">{</span>        width: 100px<span class="token punctuation">;</span>        text-align: right<span class="token punctuation">;</span>        height: 45px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    .td_right<span class="token punctuation">{</span>        padding-left: 50px <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">#username,#password,#email,#name,#tel,#birthday,#checkcode{</span>        width: 251px<span class="token punctuation">;</span>        height: 32px<span class="token punctuation">;</span>        border: 1px solid <span class="token comment">#A6A6A6 ;</span>        /*设置边框圆角*/        border-radius: 5px<span class="token punctuation">;</span>        padding-left: 10px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">#checkcode{</span>        width: 110px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">#img_check{</span>        height: 32px<span class="token punctuation">;</span>        vertical-align: middle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">#btn_sub{</span>        width: 150px<span class="token punctuation">;</span>        height: 40px<span class="token punctuation">;</span>        background-color: <span class="token comment">#FFD026;</span>        border: 1px solid <span class="token comment">#FFD026 ;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span>/style<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"rg_layout"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"rg_left"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>新用户注册<span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token environment constant">USER</span> REGISTER<span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"rg_center"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"rg_form"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span>--定义表单 form--<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>form <span class="token assign-left variable">action</span><span class="token operator">=</span><span class="token string">"#"</span> <span class="token assign-left variable">method</span><span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>table<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"td_left"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>label <span class="token assign-left variable">for</span><span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">&gt;</span>用户名<span class="token operator">&lt;</span>/label<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"td_right"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>input <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text"</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"username"</span> <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"username"</span> <span class="token assign-left variable">placeholder</span><span class="token operator">=</span><span class="token string">"请输入用户名"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"td_left"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>label <span class="token assign-left variable">for</span><span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">&gt;</span>密码<span class="token operator">&lt;</span>/label<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"td_right"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>input <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"password"</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"password"</span> <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"password"</span> <span class="token assign-left variable">placeholder</span><span class="token operator">=</span><span class="token string">"请输入密码"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"td_left"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>label <span class="token assign-left variable">for</span><span class="token operator">=</span><span class="token string">"email"</span><span class="token operator">&gt;</span>Email<span class="token operator">&lt;</span>/label<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"td_right"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>input <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"email"</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"email"</span> <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"email"</span> <span class="token assign-left variable">placeholder</span><span class="token operator">=</span><span class="token string">"请输入邮箱"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"td_left"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>label <span class="token assign-left variable">for</span><span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">&gt;</span>姓名<span class="token operator">&lt;</span>/label<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"td_right"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>input <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text"</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"name"</span> <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"name"</span> <span class="token assign-left variable">placeholder</span><span class="token operator">=</span><span class="token string">"请输入姓名"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"td_left"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>label <span class="token assign-left variable">for</span><span class="token operator">=</span><span class="token string">"tel"</span><span class="token operator">&gt;</span>手机号<span class="token operator">&lt;</span>/label<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"td_right"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>input <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text"</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"tel"</span> <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"tel"</span> <span class="token assign-left variable">placeholder</span><span class="token operator">=</span><span class="token string">"请输入手机号"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"td_left"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>label<span class="token operator">&gt;</span>性别<span class="token operator">&lt;</span>/label<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"td_right"</span><span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>input <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"radio"</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"gender"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"male"</span><span class="token operator">&gt;</span> 男                            <span class="token operator">&lt;</span>input <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"radio"</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"gender"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"female"</span><span class="token operator">&gt;</span> 女                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"td_left"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>label <span class="token assign-left variable">for</span><span class="token operator">=</span><span class="token string">"birthday"</span><span class="token operator">&gt;</span>出生日期<span class="token operator">&lt;</span>/label<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"td_right"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>input <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"date"</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"birthday"</span> <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"birthday"</span> <span class="token assign-left variable">placeholder</span><span class="token operator">=</span><span class="token string">"请输入出生日期"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"td_left"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>label <span class="token assign-left variable">for</span><span class="token operator">=</span><span class="token string">"checkcode"</span> <span class="token operator">&gt;</span>验证码<span class="token operator">&lt;</span>/label<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"td_right"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>input <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text"</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"checkcode"</span> <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"checkcode"</span> <span class="token assign-left variable">placeholder</span><span class="token operator">=</span><span class="token string">"请输入验证码"</span><span class="token operator">&gt;</span>                            <span class="token operator">&lt;</span>img <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"img_check"</span> <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"img/verify_code.jpg"</span><span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>                                        <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                        <span class="token operator">&lt;</span>td <span class="token assign-left variable">colspan</span><span class="token operator">=</span><span class="token string">"2"</span> <span class="token assign-left variable">align</span><span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>input <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"submit"</span> <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"btn_sub"</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">"注册"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>/td<span class="token operator">&gt;</span>                    <span class="token operator">&lt;</span>/tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>/table<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>/form<span class="token operator">&gt;</span>             <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"rg_right"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>已有账号?<span class="token operator">&lt;</span>a <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">&gt;</span>立即登录<span class="token operator">&lt;</span>/a<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>/div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql,约束多表，事务，JDBC整理的学习笔记</title>
      <link href="posts/4b3510a4.html"/>
      <url>posts/4b3510a4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h4 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 数据库的英文单词： DataBase 简称 ： DB    <span class="token number">2</span>. 什么数据库？        用于存储和管理数据的仓库。    <span class="token number">3</span>. 数据库的特点：    <span class="token number">1</span>. 持久化存储数据的。其实数据库就是一个文件系统    <span class="token number">2</span>. 方便存储和管理数据    <span class="token number">3</span>. 使用了统一的方式操作数据库 -- SQL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置</p><h4 id="MySQL服务启动"><a href="#MySQL服务启动" class="headerlink" title="MySQL服务启动"></a>MySQL服务启动</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">``<span class="token variable"><span class="token variable">`</span><span class="token function">bash</span>     <span class="token number">1</span>. 手动。     <span class="token number">2</span>. cmd--<span class="token operator">&gt;</span> services.msc 打开服务的窗口     <span class="token number">3</span>. 使用管理员打开cmd         * net start mysql <span class="token builtin class-name">:</span> 启动mysql的服务         * net stop mysql:关闭mysql服务<span class="token variable">`</span></span>``<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="MySQL登录"><a href="#MySQL登录" class="headerlink" title="MySQL登录"></a>MySQL登录</h4><p>​           <code>bash ​            1. mysql -uroot -p密码 ​            2. mysql -hip -uroot -p连接目标的密码 ​            3. mysql --host=ip --user=root --password=连接目标的密码 ​        * MySQL退出 ​            1. exit ​            2. quit ​           </code><br> MySQL目录结构<br>​            <code>bash ​            1. MySQL安装目录：basedir="D:/develop/MySQL/" ​                * 配置文件 my.ini ​            2. MySQL数据目录：datadir="C:/ProgramData/MySQL/MySQL Server 5.5/Data/" ​                * 几个概念 ​                    * 数据库：文件夹 ​                    * 表：文件 ​                    * 数据：数据 ​            </code></p><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.什么是SQL？        Structured Query Language：结构化查询语言        其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。        <span class="token number">2</span>.SQL通用语法        <span class="token number">1</span>. SQL 语句可以单行或多行书写，以分号结尾。        <span class="token number">2</span>. 可使用空格和缩进来增强语句的可读性。        <span class="token number">3</span>. MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。        <span class="token number">4</span>. <span class="token number">3</span> 种注释            * 单行注释: -- 注释内容 或 <span class="token comment"># 注释内容(mysql 特有) </span>            * 多行注释: /* 注释 */        <span class="token number">3</span>. SQL分类        <span class="token number">1</span><span class="token punctuation">)</span> DDL<span class="token punctuation">(</span>Data Definition Language<span class="token punctuation">)</span>数据定义语言            用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等        <span class="token number">2</span><span class="token punctuation">)</span> DML<span class="token punctuation">(</span>Data Manipulation Language<span class="token punctuation">)</span>数据操作语言            用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等        <span class="token number">3</span><span class="token punctuation">)</span> DQL<span class="token punctuation">(</span>Data Query Language<span class="token punctuation">)</span>数据查询语言            用来查询数据库中表的记录<span class="token punctuation">(</span>数据<span class="token punctuation">)</span>。关键字：select, where 等        <span class="token number">4</span><span class="token punctuation">)</span> DCL<span class="token punctuation">(</span>Data Control Language<span class="token punctuation">)</span>数据控制语言<span class="token punctuation">(</span>了解<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 操作数据库：CRUD        <span class="token number">1</span>. C<span class="token punctuation">(</span>Create<span class="token punctuation">)</span>:创建            创建数据库：                            * create database 数据库名称<span class="token punctuation">;</span>* 创建数据库，判断不存在，再创建：       * create database <span class="token keyword">if</span> not exists 数据库名称<span class="token punctuation">;</span>* 创建数据库，并指定字符集                 * create database 数据库名称 character <span class="token builtin class-name">set</span> 字符集名<span class="token punctuation">;</span>* 创建aaa数据库，判断是否存在，并制定字符集为gbk                * create database <span class="token keyword">if</span> not exists aaa character <span class="token builtin class-name">set</span> gbk<span class="token punctuation">;</span>               <span class="token number">2</span>. R<span class="token punctuation">(</span>Retrieve<span class="token punctuation">)</span>：查询            * 查询所有数据库的名称:          * show databases<span class="token punctuation">;</span>                            * 查询某个数据库的字符集:查询某个数据库的创建语句                             * show create database 数据库名称<span class="token punctuation">;</span>              <span class="token number">3</span>. U<span class="token punctuation">(</span>Update<span class="token punctuation">)</span>:修改            * 修改数据库的字符集                            * alter database 数据库名称 character <span class="token builtin class-name">set</span> 字符集名称<span class="token punctuation">;</span><span class="token number">4</span>. D<span class="token punctuation">(</span>Delete<span class="token punctuation">)</span>:删除            * 删除数据库                             * drop database 数据库名称<span class="token punctuation">;</span>                          * 判断数据库存在，存在再删除h                             * drop database <span class="token keyword">if</span> exists 数据库名称<span class="token punctuation">;</span>                <span class="token number">5</span>. 使用数据库            * 查询当前正在使用的数据库名称                             * <span class="token keyword">select</span> database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            * 使用数据库                            * use 数据库名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">一. C<span class="token punctuation">(</span>Create<span class="token punctuation">)</span>:创建 <span class="token number">1</span>. 语法：create table 表名<span class="token punctuation">(</span>                    列名1 数据类型1,                    列名2 数据类型2,                    <span class="token punctuation">..</span><span class="token punctuation">..</span>                    列名n 数据类型n                <span class="token punctuation">)</span><span class="token punctuation">;</span>* 注意：最后一列，不需要加逗号（,）* 数据库类型：            <span class="token number">1</span>. int：整数类型                 * age int,             <span class="token number">2</span>. double:小数类型                 * score double<span class="token punctuation">(</span><span class="token number">5,2</span><span class="token punctuation">)</span>             <span class="token number">3</span>. date:日期，只包含年月日，yyyy-MM-dd             <span class="token number">4</span>. datetime:日期，包含年月日时分秒  yyyy-MM-dd HH:mm:ss             <span class="token number">5</span>. timestamp:时间错类型  包含年月日时分秒     yyyy-MM-dd HH:mm:ss                            * 如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值            <span class="token number">6</span>. varchar：字符串                        * name varchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>:姓名最大20个字符                        * zhangsan <span class="token number">8</span>个字符  张三 <span class="token number">2</span>个字符               二.建表                create table student<span class="token punctuation">(</span>                    <span class="token function">id</span> int,                    name varchar<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>,                    age int ,                    score double<span class="token punctuation">(</span><span class="token number">4,1</span><span class="token punctuation">)</span>,                    birthday date,                    insert_time timestamp                <span class="token punctuation">)</span><span class="token punctuation">;</span>            * 复制表：                * create table 表名 like 被复制的表名<span class="token punctuation">;</span>       <span class="token number">2</span>. R<span class="token punctuation">(</span>Retrieve<span class="token punctuation">)</span>：查询            * 查询某个数据库中所有的表名称                * show tables<span class="token punctuation">;</span>            * 查询表结构                * desc 表名<span class="token punctuation">;</span>                 <span class="token number">3</span>. U<span class="token punctuation">(</span>Update<span class="token punctuation">)</span>:修改                   <span class="token number">1</span>. 修改表名                alter table 表名 <span class="token function">rename</span> to 新的表名<span class="token punctuation">;</span>            <span class="token number">2</span>. 修改表的字符集                alter table 表名 character <span class="token builtin class-name">set</span> 字符集名称<span class="token punctuation">;</span>            <span class="token number">3</span>. 添加一列                alter table 表名 <span class="token function">add</span> 列名 数据类型<span class="token punctuation">;</span>            <span class="token number">4</span>. 修改列名称 类型                alter table 表名 change 列名 新列别 新数据类型<span class="token punctuation">;</span>                alter table 表名 modify 列名 新数据类型<span class="token punctuation">;</span>            <span class="token number">5</span>. 删除列                alter table 表名 drop 列名<span class="token punctuation">;</span>                D<span class="token punctuation">(</span>Delete<span class="token punctuation">)</span>:删除            * drop table 表名<span class="token punctuation">;</span>            * drop table  <span class="token keyword">if</span> exists 表名 <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 添加数据：        * 语法：            * insert into 表名<span class="token punctuation">(</span>列名1,列名2,<span class="token punctuation">..</span>.列名n<span class="token punctuation">)</span> values<span class="token punctuation">(</span>值1,值2,<span class="token punctuation">..</span>.值n<span class="token punctuation">)</span><span class="token punctuation">;</span>        * 注意：            <span class="token number">1</span>. 列名和值要一一对应。            <span class="token number">2</span>. 如果表名后，不定义列名，则默认给所有列添加值                insert into 表名 values<span class="token punctuation">(</span>值1,值2,<span class="token punctuation">..</span>.值n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token number">3</span>. 除了数字类型，其他类型需要使用引号<span class="token punctuation">(</span>单双都可以<span class="token punctuation">)</span>引起来 <span class="token number">2</span>. 删除数据：        * 语法：            * delete from 表名 <span class="token punctuation">[</span>where 条件<span class="token punctuation">]</span>        * 注意：            <span class="token number">1</span>. 如果不加条件，则删除表中所有记录。            <span class="token number">2</span>. 如果要删除所有记录                <span class="token number">1</span>. delete from 表名<span class="token punctuation">;</span> -- 不推荐使用。有多少条记录就会执行多少次删除操作                <span class="token number">2</span>. TRUNCATE TABLE 表名<span class="token punctuation">;</span> -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。    <span class="token number">3</span>. 修改数据：        * 语法：            * update 表名 <span class="token builtin class-name">set</span> 列名1 <span class="token operator">=</span> 值1, 列名2 <span class="token operator">=</span> 值2,<span class="token punctuation">..</span>. <span class="token punctuation">[</span>where 条件<span class="token punctuation">]</span><span class="token punctuation">;</span>        * 注意：            <span class="token number">1</span>. 如果不加任何条件，则会将表中所有记录全部修改。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DQL：查询表中的记录"><a href="#DQL：查询表中的记录" class="headerlink" title="DQL：查询表中的记录"></a>DQL：查询表中的记录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">    * <span class="token keyword">select</span> * from 表名<span class="token punctuation">;</span> <span class="token number">1</span>. 语法：        <span class="token keyword">select</span>            字段列表        from            表名列表        where            条件列表        group by            分组字段        having            分组之后的条件        order by            排序        limit            分页限定<span class="token number">2</span>. 基础查询        <span class="token number">1</span>. 多个字段的查询            <span class="token keyword">select</span> 字段名1，字段名2<span class="token punctuation">..</span>. from 表名；            * 注意：                * 如果查询所有字段，则可以使用*来替代字段列表。        <span class="token number">2</span>. 去除重复：            * distinct        <span class="token number">3</span>. 计算列            * 一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）            * ifnull<span class="token punctuation">(</span>表达式1,表达式2<span class="token punctuation">)</span>：null参与的运算，计算结果都为null                * 表达式1：哪个字段需要判断是否为null                * 如果该字段为null后的替换值。        <span class="token number">4</span>. 起别名：            * as：as也可以省略                        条件查询        <span class="token number">1</span>. where子句后跟条件        <span class="token number">2</span>. 运算符            * <span class="token operator">&gt;</span> 、<span class="token operator">&lt;</span> 、<span class="token operator">&lt;</span><span class="token operator">=</span> 、<span class="token operator">&gt;</span><span class="token operator">=</span> 、<span class="token operator">=</span> 、<span class="token operator">&lt;&gt;</span>            * BETWEEN<span class="token punctuation">..</span>.AND              * IN<span class="token punctuation">(</span> 集合<span class="token punctuation">)</span>             * LIKE：模糊查询                * 占位符：                    * _:单个任意字符                    * %：多个任意字符            * IS NULL              * and  或 <span class="token operator">&amp;&amp;</span>            * or  或 <span class="token operator">||</span>             * not  或 <span class="token operator">!</span>                            -- 查询年龄大于20岁                SELECT * FROM student WHERE age <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">;</span>                                SELECT * FROM student WHERE age <span class="token operator">&gt;</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>                                -- 查询年龄等于20岁                SELECT * FROM student WHERE age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>                                -- 查询年龄不等于20岁                SELECT * FROM student WHERE age <span class="token operator">!=</span> <span class="token number">20</span><span class="token punctuation">;</span>                SELECT * FROM student WHERE age <span class="token operator">&lt;&gt;</span> <span class="token number">20</span><span class="token punctuation">;</span>                                -- 查询年龄大于等于20 小于等于30                                SELECT * FROM student WHERE age <span class="token operator">&gt;</span><span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span>  age <span class="token operator">&lt;</span><span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>                SELECT * FROM student WHERE age <span class="token operator">&gt;</span><span class="token operator">=</span> <span class="token number">20</span> AND  age <span class="token operator">&lt;</span><span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>                SELECT * FROM student WHERE age BETWEEN <span class="token number">20</span> AND <span class="token number">30</span><span class="token punctuation">;</span>                                -- 查询年龄22岁，18岁，25岁的信息                SELECT * FROM student WHERE age <span class="token operator">=</span> <span class="token number">22</span> OR age <span class="token operator">=</span> <span class="token number">18</span> OR age <span class="token operator">=</span> <span class="token number">25</span>                SELECT * FROM student WHERE age IN <span class="token punctuation">(</span><span class="token number">22,18</span>,25<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DQL-查询语句"><a href="#DQL-查询语句" class="headerlink" title="DQL:查询语句"></a>DQL:查询语句</h4><ol><li><p>排序查询</p><p>语法：order by 子句</p><p>order by 排序字段1 排序方式1 ，  排序字段2 排序方式2…</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">排序方式：* ASC：升序，默认的。* DESC：降序。注意：* 如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2</span>. 聚合函数：将一列数据作为一个整体，进行纵向的计算。<span class="token number">1</span>. count：计算个数<span class="token number">1</span>. 一般选择非空的列：主键<span class="token number">2</span>. count<span class="token punctuation">(</span>*<span class="token punctuation">)</span><span class="token number">2</span>. max：计算最大值<span class="token number">3</span>. min：计算最小值<span class="token number">4</span>. sum：计算和<span class="token number">5</span>. avg：计算平均值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">注意：聚合函数的计算，排除null值。解决方案：<span class="token number">1</span>. 选择不包含非空的列进行计算<span class="token number">2</span>. IFNULL函数<span class="token number">3</span>. 分组查询:<span class="token number">1</span>. 语法：group by 分组字段；<span class="token number">2</span>. 注意：<span class="token number">1</span>. 分组之后查询的字段：分组字段、聚合函数<span class="token number">2</span>. where 和 having 的区别？<span class="token number">1</span>. where 在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来<span class="token number">2</span>. where 后不可以跟聚合函数，having可以进行聚合函数的判断。-- 按照性别分组。分别查询男、女同学的平均分SELECT sex , AVG<span class="token punctuation">(</span>math<span class="token punctuation">)</span> FROM student GROUP BY sex<span class="token punctuation">;</span>-- 按照性别分组。分别查询男、女同学的平均分,人数SELECT sex , AVG<span class="token punctuation">(</span>math<span class="token punctuation">)</span>,COUNT<span class="token punctuation">(</span>id<span class="token punctuation">)</span> FROM student GROUP BY sex<span class="token punctuation">;</span>--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组SELECT sex , AVG<span class="token punctuation">(</span>math<span class="token punctuation">)</span>,COUNT<span class="token punctuation">(</span>id<span class="token punctuation">)</span> FROM student WHERE math <span class="token operator">&gt;</span> <span class="token number">70</span> GROUP BY sex<span class="token punctuation">;</span>--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组,分组之后。人数要大于2个人SELECT sex , AVG<span class="token punctuation">(</span>math<span class="token punctuation">)</span>,COUNT<span class="token punctuation">(</span>id<span class="token punctuation">)</span> FROM student WHERE math <span class="token operator">&gt;</span> <span class="token number">70</span> GROUP BY sex HAVING COUNT<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>SELECT sex , AVG<span class="token punctuation">(</span>math<span class="token punctuation">)</span>,COUNT<span class="token punctuation">(</span>id<span class="token punctuation">)</span> 人数 FROM student WHERE math <span class="token operator">&gt;</span> <span class="token number">70</span> GROUP BY sex HAVING 人数 <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​            </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">4</span>. 分页查询<span class="token number">1</span>. 语法：limit 开始的索引,每页查询的条数<span class="token punctuation">;</span><span class="token number">2</span>. 公式：开始的索引 <span class="token operator">=</span> （当前的页码 - <span class="token number">1</span>） * 每页显示的条数-- 每页显示3条记录 SELECT * FROM student LIMIT <span class="token number">0,3</span><span class="token punctuation">;</span> -- 第1页SELECT * FROM student LIMIT <span class="token number">3,3</span><span class="token punctuation">;</span> -- 第2页SELECT * FROM student LIMIT <span class="token number">6,3</span><span class="token punctuation">;</span> -- 第3页<span class="token number">3</span>. limit 是一个MySQL<span class="token string">"方言"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* 概念： 对表中的数据进行限定，保证数据的正确性、有效性和完整性。* 分类：<span class="token number">1</span>. 主键约束：primary key<span class="token number">2</span>. 非空约束：not null<span class="token number">3</span>. 唯一约束：unique<span class="token number">4</span>. 外键约束：foreign key* 非空约束：not null，某一列的值不能为null<span class="token number">1</span>. 创建表时添加约束CREATE TABLE stu<span class="token punctuation">(</span><span class="token function">id</span> INT,NAME VARCHAR<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL -- name为非空<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span>. 创建表完后，添加非空约束ALTER TABLE stu MODIFY NAME VARCHAR<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL<span class="token punctuation">;</span><span class="token number">3</span>. 删除name的非空约束ALTER TABLE stu MODIFY NAME VARCHAR<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>* 唯一约束：unique，某一列的值不能重复<span class="token number">1</span>. 注意：* 唯一约束可以有NULL值，但是只能有一条记录为null<span class="token number">2</span>. 在创建表时，添加唯一约束CREATE TABLE stu<span class="token punctuation">(</span><span class="token function">id</span> INT,phone_number VARCHAR<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> UNIQUE -- 手机号<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span>. 删除唯一约束ALTER TABLE stu DROP INDEX phone_number<span class="token punctuation">;</span><span class="token number">4</span>. 在表创建完后，添加唯一约束ALTER TABLE stu MODIFY phone_number VARCHAR<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> UNIQUE<span class="token punctuation">;</span>* 主键约束：primary key。<span class="token number">1</span>. 注意：<span class="token number">1</span>. 含义：非空且唯一<span class="token number">2</span>. 一张表只能有一个字段为主键<span class="token number">3</span>. 主键就是表中记录的唯一标识<span class="token number">2</span>. 在创建表时，添加主键约束create table stu<span class="token punctuation">(</span><span class="token function">id</span> int primary key,-- 给id添加主键约束name varchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span>. 删除主键-- 错误 alter table stu modify <span class="token function">id</span> int <span class="token punctuation">;</span>ALTER TABLE stu DROP PRIMARY KEY<span class="token punctuation">;</span><span class="token number">4</span>. 创建完表后，添加主键ALTER TABLE stu MODIFY <span class="token function">id</span> INT PRIMARY KEY<span class="token punctuation">;</span><span class="token number">5</span>. 自动增长：<span class="token number">1</span>.  概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长<span class="token number">2</span>. 在创建表时，添加主键约束，并且完成主键自增长create table stu<span class="token punctuation">(</span><span class="token function">id</span> int primary key auto_increment,-- 给id添加主键约束name varchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​            </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">3</span>. 删除自动增长ALTER TABLE stu MODIFY <span class="token function">id</span> INT<span class="token punctuation">;</span><span class="token number">4</span>. 添加自动增长ALTER TABLE stu MODIFY <span class="token function">id</span> INT AUTO_INCREMENT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* 外键约束：foreign key,让表于表产生关系，从而保证数据的正确性。<span class="token number">1</span>. 在创建表时，可以添加外键* 语法：create table 表名<span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">..</span>外键列constraint 外键名称 foreign key <span class="token punctuation">(</span>外键列名称<span class="token punctuation">)</span> references 主表名称<span class="token punctuation">(</span>主表列名称<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span>. 删除外键ALTER TABLE 表名 DROP FOREIGN KEY 外键名称<span class="token punctuation">;</span><span class="token number">3</span>. 创建表之后，添加外键ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY <span class="token punctuation">(</span>外键字段名称<span class="token punctuation">)</span> REFERENCES 主表名称<span class="token punctuation">(</span>主表列名称<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">4</span>. 级联操作<span class="token number">1</span>. 添加级联操作语法：ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY <span class="token punctuation">(</span>外键字段名称<span class="token punctuation">)</span> REFERENCES 主表名称<span class="token punctuation">(</span>主表列名称<span class="token punctuation">)</span> ON UPDATE CASCADE ON DELETE CASCADE  <span class="token punctuation">;</span><span class="token number">2</span>. 分类：<span class="token number">1</span>. 级联更新：ON UPDATE CASCADE <span class="token number">2</span>. 级联删除：ON DELETE CASCADE <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 多表之间的关系<span class="token number">1</span>. 分类：<span class="token number">1</span>. 一对一<span class="token punctuation">(</span>了解<span class="token punctuation">)</span>：* 如：人和身份证* 分析：一个人只有一个身份证，一个身份证只能对应一个人<span class="token number">2</span>. 一对多<span class="token punctuation">(</span>多对一<span class="token punctuation">)</span>：* 如：部门和员工* 分析：一个部门有多个员工，一个员工只能对应一个部门<span class="token number">3</span>. 多对多：* 如：学生和课程* 分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择<span class="token number">2</span>. 实现关系：<span class="token number">1</span>. 一对多<span class="token punctuation">(</span>多对一<span class="token punctuation">)</span>：* 如：部门和员工* 实现方式：在多的一方建立外键，指向一的一方的主键。<span class="token number">2</span>. 多对多：* 如：学生和课程* 实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键<span class="token number">3</span>. 一对一<span class="token punctuation">(</span>了解<span class="token punctuation">)</span>：* 如：人和身份证* 实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。<span class="token number">3</span>. 案例-- 创建旅游线路分类表 tab_category-- cid 旅游线路分类主键，自动增长-- cname 旅游线路分类名称非空，唯一，字符串 <span class="token number">100</span>CREATE TABLE tab_category <span class="token punctuation">(</span>cid INT PRIMARY KEY AUTO_INCREMENT,cname VARCHAR<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> NOT NULL UNIQUE<span class="token punctuation">)</span><span class="token punctuation">;</span>-- 创建旅游线路表 tab_route/*rid 旅游线路主键，自动增长rname 旅游线路名称非空，唯一，字符串 <span class="token number">100</span>price 价格rdate 上架时间，日期类型cid 外键，所属分类*/CREATE TABLE tab_route<span class="token punctuation">(</span>rid INT PRIMARY KEY AUTO_INCREMENT,rname VARCHAR<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> NOT NULL UNIQUE,price DOUBLE,rdate DATE,cid INT,FOREIGN KEY <span class="token punctuation">(</span>cid<span class="token punctuation">)</span> REFERENCES tab_category<span class="token punctuation">(</span>cid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>/*创建用户表 tab_useruid 用户主键，自增长username 用户名长度 <span class="token number">100</span>，唯一，非空password 密码长度 <span class="token number">30</span>，非空name 真实姓名长度 <span class="token number">100</span>birthday 生日sex 性别，定长字符串 <span class="token number">1</span>telephone 手机号，字符串 <span class="token number">11</span>email 邮箱，字符串长度 <span class="token number">100</span>*/CREATE TABLE tab_user <span class="token punctuation">(</span>uid INT PRIMARY KEY AUTO_INCREMENT,username VARCHAR<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> UNIQUE NOT NULL,PASSWORD VARCHAR<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> NOT NULL,NAME VARCHAR<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>,birthday DATE,sex CHAR<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> DEFAULT <span class="token string">'男'</span>,telephone VARCHAR<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>,email VARCHAR<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>/*创建收藏表 tab_favoriterid 旅游线路 id，外键<span class="token function">date</span> 收藏时间uid 用户 id，外键rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次*/CREATE TABLE tab_favorite <span class="token punctuation">(</span>rid INT, -- 线路idDATE DATETIME,uid INT, -- 用户id-- 创建复合主键PRIMARY KEY<span class="token punctuation">(</span>rid,uid<span class="token punctuation">)</span>, -- 联合主键FOREIGN KEY <span class="token punctuation">(</span>rid<span class="token punctuation">)</span> REFERENCES tab_route<span class="token punctuation">(</span>rid<span class="token punctuation">)</span>,FOREIGN KEY<span class="token punctuation">(</span>uid<span class="token punctuation">)</span> REFERENCES tab_user<span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2</span>. 数据库设计的范式* 概念：设计数据库时，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式<span class="token punctuation">(</span>4NF）和第五范式（5NF，又称完美范式）。* 分类：<span class="token number">1</span>. 第一范式（1NF）：每一列都是不可分割的原子数据项<span class="token number">2</span>. 第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的部分函数依赖）* 几个概念：<span class="token number">1</span>. 函数依赖：A--<span class="token operator">&gt;</span>B,如果通过A属性<span class="token punctuation">(</span>属性组<span class="token punctuation">)</span>的值，可以确定唯一B属性的值。则称B依赖于A例如：学号--<span class="token operator">&gt;</span>姓名。  （学号，课程名称） --<span class="token operator">&gt;</span> 分数<span class="token number">2</span>. 完全函数依赖：A--<span class="token operator">&gt;</span>B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。例如：（学号，课程名称） --<span class="token operator">&gt;</span> 分数<span class="token number">3</span>. 部分函数依赖：A--<span class="token operator">&gt;</span>B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。例如：（学号，课程名称） -- <span class="token operator">&gt;</span> 姓名<span class="token number">4</span>. 传递函数依赖：A--<span class="token operator">&gt;</span>B, B -- <span class="token operator">&gt;</span>C <span class="token builtin class-name">.</span> 如果通过A属性<span class="token punctuation">(</span>属性组<span class="token punctuation">)</span>的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A例如：学号--<span class="token operator">&gt;</span>系名，系名--<span class="token operator">&gt;</span>系主任<span class="token number">5</span>. 码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性<span class="token punctuation">(</span>属性组<span class="token punctuation">)</span>为该表的码例如：该表中码为：（学号，课程名称）* 主属性：码属性组中的所有属性* 非主属性：除过码属性组的属性<span class="token number">3</span>. 第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 命令行：* 语法：* 备份： mysqldump -u用户名 -p密码 数据库名称 <span class="token operator">&gt;</span> 保存的路径* 还原：<span class="token number">1</span>. 登录数据库<span class="token number">2</span>. 创建数据库<span class="token number">3</span>. 使用数据库<span class="token number">4</span>. 执行文件。source 文件路径<span class="token number">2</span>. 图形化工具：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多表查询："><a href="#多表查询：" class="headerlink" title="多表查询："></a>多表查询：</h4><ul><li><p>查询语法：<br>  select<br>  列名列表<br>  from<br>  表名列表<br>  where….</p><ul><li><p>准备sql</p><h5 id="创建部门表"><a href="#创建部门表" class="headerlink" title="创建部门表"></a>创建部门表</h5><p>CREATE TABLE dept(</p><pre><code>id INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR(20)</code></pre><p>);<br>INSERT INTO dept (NAME) VALUES (‘开发部’),(‘市场部’),(‘财务部’);</p><h5 id="创建员工表"><a href="#创建员工表" class="headerlink" title="创建员工表"></a>创建员工表</h5><p>CREATE TABLE emp (</p><pre><code>id INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR(10),gender CHAR(1), -- 性别salary DOUBLE, -- 工资join_date DATE, -- 入职日期dept_id INT,FOREIGN KEY (dept_id) REFERENCES dept(id) -- 外键，关联部门表(部门表的主键)</code></pre><p>);<br>INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(‘孙悟空’,’男’,7200,’2013-02-24’,1);<br>INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(‘猪八戒’,’男’,3600,’2010-12-02’,2);<br>INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(‘唐僧’,’男’,9000,’2008-08-08’,2);<br>INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(‘白骨精’,’女’,5000,’2015-10-07’,3);<br>INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(‘蜘蛛精’,’女’,4500,’2011-03-14’,1);</p><p>笛卡尔积：</p><p>有两个集合A,B .取这两个集合的所有组成情况。</p><p>要完成多表查询，需要消除无用的数据</p><p>多表查询的分类</p></li></ul></li></ul><pre><code>   1.内连接查询：   1. 隐式内连接：使用where条件消除无用数据       * 例子：       -- 查询所有员工信息和对应的部门信息</code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SELECT * FROM emp,dept WHERE emp.<span class="token variable"><span class="token variable">`</span>dept_id<span class="token variable">`</span></span> <span class="token operator">=</span> dept.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span><span class="token punctuation">;</span>-- 查询员工表的名称，性别。部门表的名称SELECT emp.name,emp.gender,dept.name FROM emp,dept WHERE emp.<span class="token variable"><span class="token variable">`</span>dept_id<span class="token variable">`</span></span> <span class="token operator">=</span> dept.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span><span class="token punctuation">;</span>SELECT t1.name, -- 员工表的姓名t1.gender,-- 员工表的性别t2.name -- 部门表的名称FROMemp t1,dept t2WHERE t1.<span class="token variable"><span class="token variable">`</span>dept_id<span class="token variable">`</span></span> <span class="token operator">=</span> t2.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2</span>. 显式内连接：* 语法： <span class="token keyword">select</span> 字段列表 from 表名1 <span class="token punctuation">[</span>inner<span class="token punctuation">]</span> <span class="token function">join</span> 表名2 on 条件* 例如：* SELECT * FROM emp INNER JOIN dept ON emp.<span class="token variable"><span class="token variable">`</span>dept_id<span class="token variable">`</span></span> <span class="token operator">=</span> dept.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span><span class="token punctuation">;</span>* SELECT * FROM emp JOIN dept ON emp.<span class="token variable"><span class="token variable">`</span>dept_id<span class="token variable">`</span></span> <span class="token operator">=</span> dept.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token number">3</span>. 内连接查询：<span class="token number">1</span>. 从哪些表中查询数据<span class="token number">2</span>. 条件是什么<span class="token number">3</span>. 查询哪些字段<span class="token number">2</span>. 外链接查询：<span class="token number">1</span>. 左外连接：* 语法：select 字段列表 from 表1 left <span class="token punctuation">[</span>outer<span class="token punctuation">]</span> <span class="token function">join</span> 表2 on 条件；* 查询的是左表所有数据以及其交集部分。* 例子：-- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称SELECT t1.*,t2.<span class="token variable"><span class="token variable">`</span>name<span class="token variable">`</span></span> FROM emp t1 LEFT JOIN dept t2 ON t1.<span class="token variable"><span class="token variable">`</span>dept_id<span class="token variable">`</span></span> <span class="token operator">=</span> t2.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token number">2</span>. 右外连接：* 语法：select 字段列表 from 表1 right <span class="token punctuation">[</span>outer<span class="token punctuation">]</span> <span class="token function">join</span> 表2 on 条件；* 查询的是右表所有数据以及其交集部分。* 例子：SELECT * FROM dept t2 RIGHT JOIN emp t1 ON t1.<span class="token variable"><span class="token variable">`</span>dept_id<span class="token variable">`</span></span> <span class="token operator">=</span> t2.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token number">3</span>. 子查询：* 概念：查询中嵌套查询，称嵌套查询为子查询。-- 查询工资最高的员工信息-- <span class="token number">1</span> 查询最高的工资是多少 <span class="token number">9000</span>SELECT MAX<span class="token punctuation">(</span>salary<span class="token punctuation">)</span> FROM emp<span class="token punctuation">;</span>-- <span class="token number">2</span> 查询员工信息，并且工资等于9000的SELECT * FROM emp WHERE emp.<span class="token variable"><span class="token variable">`</span>salary<span class="token variable">`</span></span> <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span>-- 一条sql就完成这个操作。子查询SELECT * FROM emp WHERE emp.<span class="token variable"><span class="token variable">`</span>salary<span class="token variable">`</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>SELECT MAX<span class="token punctuation">(</span>salary<span class="token punctuation">)</span> FROM emp<span class="token punctuation">)</span><span class="token punctuation">;</span>* 子查询不同情况<span class="token number">1</span>. 子查询的结果是单行单列的：* 子查询可以作为条件，使用运算符去判断。 运算符： <span class="token operator">&gt;</span> <span class="token operator">&gt;</span><span class="token operator">=</span> <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token operator">=</span> <span class="token operator">=</span>* -- 查询员工工资小于平均工资的人SELECT * FROM emp WHERE emp.salary <span class="token operator">&lt;</span> <span class="token punctuation">(</span>SELECT AVG<span class="token punctuation">(</span>salary<span class="token punctuation">)</span> FROM emp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span>. 子查询的结果是多行单列的：* 子查询可以作为条件，使用运算符in来判断-- 查询<span class="token string">'财务部'</span>和<span class="token string">'市场部'</span>所有的员工信息SELECT <span class="token function">id</span> FROM dept WHERE NAME <span class="token operator">=</span> <span class="token string">'财务部'</span> OR NAME <span class="token operator">=</span> <span class="token string">'市场部'</span><span class="token punctuation">;</span>SELECT * FROM emp WHERE dept_id <span class="token operator">=</span> <span class="token number">3</span> OR dept_id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>-- 子查询SELECT * FROM emp WHERE dept_id IN <span class="token punctuation">(</span>SELECT <span class="token function">id</span> FROM dept WHERE NAME <span class="token operator">=</span> <span class="token string">'财务部'</span> OR NAME <span class="token operator">=</span> <span class="token string">'市场部'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span>. 子查询的结果是多行多列的：* 子查询可以作为一张虚拟表参与查询-- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息-- 子查询SELECT * FROM dept t1 ,<span class="token punctuation">(</span>SELECT * FROM emp WHERE emp.<span class="token variable"><span class="token variable">`</span>join_date<span class="token variable">`</span></span> <span class="token operator">&gt;</span> <span class="token string">'2011-11-11'</span><span class="token punctuation">)</span> t2WHERE t1.id <span class="token operator">=</span> t2.dept_id<span class="token punctuation">;</span>-- 普通内连接SELECT * FROM emp t1,dept t2 WHERE t1.<span class="token variable"><span class="token variable">`</span>dept_id<span class="token variable">`</span></span> <span class="token operator">=</span> t2.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span> AND t1.<span class="token variable"><span class="token variable">`</span>join_date<span class="token variable">`</span></span> <span class="token operator">&gt;</span>  <span class="token string">'2011-11-11'</span>* 多表查询练习-- 部门表CREATE TABLE dept <span class="token punctuation">(</span>  <span class="token function">id</span> INT PRIMARY KEY PRIMARY KEY, -- 部门id  dname VARCHAR<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>, -- 部门名称  loc VARCHAR<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> -- 部门所在地<span class="token punctuation">)</span><span class="token punctuation">;</span>-- 添加4个部门INSERT INTO dept<span class="token punctuation">(</span>id,dname,loc<span class="token punctuation">)</span> VALUES <span class="token punctuation">(</span><span class="token number">10</span>,<span class="token string">'教研部'</span>,<span class="token string">'北京'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">20</span>,<span class="token string">'学工部'</span>,<span class="token string">'上海'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">30</span>,<span class="token string">'销售部'</span>,<span class="token string">'广州'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">40</span>,<span class="token string">'财务部'</span>,<span class="token string">'深圳'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<br>​                </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- 职务表，职务名称，职务描述CREATE TABLE job <span class="token punctuation">(</span>  <span class="token function">id</span> INT PRIMARY KEY,  jname VARCHAR<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>,  description VARCHAR<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>-- 添加4个职务INSERT INTO job <span class="token punctuation">(</span>id, jname, description<span class="token punctuation">)</span> VALUES<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token string">'董事长'</span>, <span class="token string">'管理整个公司，接单'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">2</span>, <span class="token string">'经理'</span>, <span class="token string">'管理部门员工'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">3</span>, <span class="token string">'销售员'</span>, <span class="token string">'向客人推销产品'</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">4</span>, <span class="token string">'文员'</span>, <span class="token string">'使用办公软件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<br>​                </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- 员工表CREATE TABLE emp <span class="token punctuation">(</span>  <span class="token function">id</span> INT PRIMARY KEY, -- 员工id  ename VARCHAR<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>, -- 员工姓名  job_id INT, -- 职务id  mgr INT , -- 上级领导  joindate DATE, -- 入职日期  salary DECIMAL<span class="token punctuation">(</span><span class="token number">7,2</span><span class="token punctuation">)</span>, -- 工资  bonus DECIMAL<span class="token punctuation">(</span><span class="token number">7,2</span><span class="token punctuation">)</span>, -- 奖金  dept_id INT, -- 所在部门编号  CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEY <span class="token punctuation">(</span>job_id<span class="token punctuation">)</span> REFERENCES job <span class="token punctuation">(</span>id<span class="token punctuation">)</span>,  CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY <span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span> REFERENCES dept <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>-- 添加员工INSERT INTO emp<span class="token punctuation">(</span>id,ename,job_id,mgr,joindate,salary,bonus,dept_id<span class="token punctuation">)</span> VALUES <span class="token punctuation">(</span><span class="token number">1001</span>,<span class="token string">'孙悟空'</span>,4,1004,<span class="token string">'2000-12-17'</span>,<span class="token string">'8000.00'</span>,NULL,20<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">1002</span>,<span class="token string">'卢俊义'</span>,3,1006,<span class="token string">'2001-02-20'</span>,<span class="token string">'16000.00'</span>,<span class="token string">'3000.00'</span>,30<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">1003</span>,<span class="token string">'林冲'</span>,3,1006,<span class="token string">'2001-02-22'</span>,<span class="token string">'12500.00'</span>,<span class="token string">'5000.00'</span>,30<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">1004</span>,<span class="token string">'唐僧'</span>,2,1009,<span class="token string">'2001-04-02'</span>,<span class="token string">'29750.00'</span>,NULL,20<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">1005</span>,<span class="token string">'李逵'</span>,4,1006,<span class="token string">'2001-09-28'</span>,<span class="token string">'12500.00'</span>,<span class="token string">'14000.00'</span>,30<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">1006</span>,<span class="token string">'宋江'</span>,2,1009,<span class="token string">'2001-05-01'</span>,<span class="token string">'28500.00'</span>,NULL,30<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">1007</span>,<span class="token string">'刘备'</span>,2,1009,<span class="token string">'2001-09-01'</span>,<span class="token string">'24500.00'</span>,NULL,10<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">1008</span>,<span class="token string">'猪八戒'</span>,4,1004,<span class="token string">'2007-04-19'</span>,<span class="token string">'30000.00'</span>,NULL,20<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">1009</span>,<span class="token string">'罗贯中'</span>,1,NULL,<span class="token string">'2001-11-17'</span>,<span class="token string">'50000.00'</span>,NULL,10<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">1010</span>,<span class="token string">'吴用'</span>,3,1006,<span class="token string">'2001-09-08'</span>,<span class="token string">'15000.00'</span>,<span class="token string">'0.00'</span>,30<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">1011</span>,<span class="token string">'沙僧'</span>,4,1004,<span class="token string">'2007-05-23'</span>,<span class="token string">'11000.00'</span>,NULL,20<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">1012</span>,<span class="token string">'李逵'</span>,4,1006,<span class="token string">'2001-12-03'</span>,<span class="token string">'9500.00'</span>,NULL,30<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">1013</span>,<span class="token string">'小白龙'</span>,4,1004,<span class="token string">'2001-12-03'</span>,<span class="token string">'30000.00'</span>,NULL,20<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">1014</span>,<span class="token string">'关羽'</span>,4,1007,<span class="token string">'2002-01-23'</span>,<span class="token string">'13000.00'</span>,NULL,10<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<br>​                </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- 工资等级表CREATE TABLE salarygrade <span class="token punctuation">(</span>  grade INT PRIMARY KEY,   -- 级别  losalary INT,  -- 最低工资  hisalary INT -- 最高工资<span class="token punctuation">)</span><span class="token punctuation">;</span>-- 添加5个工资等级INSERT INTO salarygrade<span class="token punctuation">(</span>grade,losalary,hisalary<span class="token punctuation">)</span> VALUES <span class="token punctuation">(</span><span class="token number">1,7000</span>,12000<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">2,12010</span>,14000<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">3,14010</span>,20000<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">4,20010</span>,30000<span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">5,30010</span>,99990<span class="token punctuation">)</span><span class="token punctuation">;</span>-- 需求：-- <span class="token number">1</span>.查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述/*分析：<span class="token number">1</span>.员工编号，员工姓名，工资，需要查询emp表  职务名称，职务描述 需要查询job表<span class="token number">2</span>.查询条件 emp.job_id <span class="token operator">=</span> job.id*/SELECT t1.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span>, -- 员工编号t1.<span class="token variable"><span class="token variable">`</span>ename<span class="token variable">`</span></span>, -- 员工姓名t1.<span class="token variable"><span class="token variable">`</span>salary<span class="token variable">`</span></span>,-- 工资t2.<span class="token variable"><span class="token variable">`</span>jname<span class="token variable">`</span></span>, -- 职务名称t2.<span class="token variable"><span class="token variable">`</span>description<span class="token variable">`</span></span> -- 职务描述FROM emp t1, job t2WHERE t1.<span class="token variable"><span class="token variable">`</span>job_id<span class="token variable">`</span></span> <span class="token operator">=</span> t2.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<br>​                </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- <span class="token number">2</span>.查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置/*分析：<span class="token number">1</span>. 员工编号，员工姓名，工资 emp  职务名称，职务描述 job  部门名称，部门位置 dept<span class="token number">2</span>. 条件： emp.job_id <span class="token operator">=</span> job.id and emp.dept_id <span class="token operator">=</span> dept.id*/SELECT t1.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span>, -- 员工编号t1.<span class="token variable"><span class="token variable">`</span>ename<span class="token variable">`</span></span>, -- 员工姓名t1.<span class="token variable"><span class="token variable">`</span>salary<span class="token variable">`</span></span>,-- 工资t2.<span class="token variable"><span class="token variable">`</span>jname<span class="token variable">`</span></span>, -- 职务名称t2.<span class="token variable"><span class="token variable">`</span>description<span class="token variable">`</span></span>, -- 职务描述t3.<span class="token variable"><span class="token variable">`</span>dname<span class="token variable">`</span></span>, -- 部门名称t3.<span class="token variable"><span class="token variable">`</span>loc<span class="token variable">`</span></span> -- 部门位置FROM emp t1, job t2,dept t3WHERE t1.<span class="token variable"><span class="token variable">`</span>job_id<span class="token variable">`</span></span> <span class="token operator">=</span> t2.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span> AND t1.<span class="token variable"><span class="token variable">`</span>dept_id<span class="token variable">`</span></span> <span class="token operator">=</span> t3.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span><span class="token punctuation">;</span>   -- <span class="token number">3</span>.查询员工姓名，工资，工资等级/*分析：<span class="token number">1</span>.员工姓名，工资 emp  工资等级 salarygrade<span class="token number">2</span>.条件 emp.salary <span class="token operator">&gt;</span><span class="token operator">=</span> salarygrade.losalary and emp.salary <span class="token operator">&lt;</span><span class="token operator">=</span> salarygrade.hisalaryemp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary*/SELECT t1.ename ,t1.<span class="token variable"><span class="token variable">`</span>salary<span class="token variable">`</span></span>,t2.*FROM emp t1, salarygrade t2WHERE t1.<span class="token variable"><span class="token variable">`</span>salary<span class="token variable">`</span></span> BETWEEN t2.<span class="token variable"><span class="token variable">`</span>losalary<span class="token variable">`</span></span> AND t2.<span class="token variable"><span class="token variable">`</span>hisalary<span class="token variable">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<br>​                </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- <span class="token number">4</span>.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级/*分析：<span class="token number">1</span>. 员工姓名，工资 emp ， 职务名称，职务描述 job 部门名称，部门位置，dept  工资等级 salarygrade<span class="token number">2</span>. 条件： emp.job_id <span class="token operator">=</span> job.id and emp.dept_id <span class="token operator">=</span> dept.id and emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary*/SELECT t1.<span class="token variable"><span class="token variable">`</span>ename<span class="token variable">`</span></span>,t1.<span class="token variable"><span class="token variable">`</span>salary<span class="token variable">`</span></span>,t2.<span class="token variable"><span class="token variable">`</span>jname<span class="token variable">`</span></span>,t2.<span class="token variable"><span class="token variable">`</span>description<span class="token variable">`</span></span>,t3.<span class="token variable"><span class="token variable">`</span>dname<span class="token variable">`</span></span>,t3.<span class="token variable"><span class="token variable">`</span>loc<span class="token variable">`</span></span>,t4.<span class="token variable"><span class="token variable">`</span>grade<span class="token variable">`</span></span>FROM emp t1,job t2,dept t3,salarygrade t4WHERE t1.<span class="token variable"><span class="token variable">`</span>job_id<span class="token variable">`</span></span> <span class="token operator">=</span> t2.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span> AND t1.<span class="token variable"><span class="token variable">`</span>dept_id<span class="token variable">`</span></span> <span class="token operator">=</span> t3.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span>AND t1.<span class="token variable"><span class="token variable">`</span>salary<span class="token variable">`</span></span> BETWEEN t4.<span class="token variable"><span class="token variable">`</span>losalary<span class="token variable">`</span></span> AND t4.<span class="token variable"><span class="token variable">`</span>hisalary<span class="token variable">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<br>​                </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- <span class="token number">5</span>.查询出部门编号、部门名称、部门位置、部门人数/*分析：<span class="token number">1</span>.部门编号、部门名称、部门位置 dept 表。 部门人数 emp表<span class="token number">2</span>.使用分组查询。按照emp.dept_id完成分组，查询count<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token number">3</span>.使用子查询将第2步的查询结果和dept表进行关联查询*/SELECT t1.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span>,t1.<span class="token variable"><span class="token variable">`</span>dname<span class="token variable">`</span></span>,t1.<span class="token variable"><span class="token variable">`</span>loc<span class="token variable">`</span></span> , t2.totalFROM dept t1,<span class="token punctuation">(</span>SELECTdept_id,COUNT<span class="token punctuation">(</span>id<span class="token punctuation">)</span> totalFROM empGROUP BY dept_id<span class="token punctuation">)</span> t2WHERE t1.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span> <span class="token operator">=</span> t2.dept_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​                </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- <span class="token number">6</span>.查询所有员工的姓名及其直接上级的姓名,没有领导的员工也需要查询/*分析：<span class="token number">1</span>.姓名 emp， 直接上级的姓名 emp* emp表的id 和 mgr 是自关联<span class="token number">2</span>.条件 emp.id <span class="token operator">=</span> emp.mgr<span class="token number">3</span>.查询左表的所有数据，和 交集数据* 使用左外连接查询*//*<span class="token keyword">select</span>t1.ename,t1.mgr,t2.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span>,t2.enamefrom emp t1, emp t2where t1.mgr <span class="token operator">=</span> t2.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span><span class="token punctuation">;</span>*/SELECT t1.ename,t1.mgr,t2.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span>,t2.<span class="token variable"><span class="token variable">`</span>ename<span class="token variable">`</span></span>FROM emp t1LEFT JOIN emp t2ON t1.<span class="token variable"><span class="token variable">`</span>mgr<span class="token variable">`</span></span> <span class="token operator">=</span> t2.<span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 事务的基本介绍<span class="token number">1</span>. 概念：*  如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。<span class="token number">2</span>. 操作：<span class="token number">1</span>. 开启事务： start transaction<span class="token punctuation">;</span><span class="token number">2</span>. 回滚：rollback<span class="token punctuation">;</span><span class="token number">3</span>. 提交：commit<span class="token punctuation">;</span><span class="token number">3</span>. 例子：CREATE TABLE account <span class="token punctuation">(</span><span class="token function">id</span> INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>,balance DOUBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>-- 添加数据INSERT INTO account <span class="token punctuation">(</span>NAME, balance<span class="token punctuation">)</span> VALUES <span class="token punctuation">(</span><span class="token string">'zhangsan'</span>, <span class="token number">1000</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token string">'lisi'</span>, <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​            </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SELECT * FROM account<span class="token punctuation">;</span>UPDATE account SET balance <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>-- 张三给李四转账 <span class="token number">500</span> 元-- <span class="token number">0</span>. 开启事务START TRANSACTION<span class="token punctuation">;</span>-- <span class="token number">1</span>. 张三账户 -500UPDATE account SET balance <span class="token operator">=</span> balance - <span class="token number">500</span> WHERE NAME <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span>-- <span class="token number">2</span>. 李四账户 +500-- 出错了<span class="token punctuation">..</span>.UPDATE account SET balance <span class="token operator">=</span> balance + <span class="token number">500</span> WHERE NAME <span class="token operator">=</span> <span class="token string">'lisi'</span><span class="token punctuation">;</span>-- 发现执行没有问题，提交事务COMMIT<span class="token punctuation">;</span>-- 发现出问题了，回滚事务ROLLBACK<span class="token punctuation">;</span><span class="token number">4</span>. MySQL数据库中事务默认自动提交* 事务提交的两种方式：* 自动提交：* mysql就是自动提交的* 一条DML<span class="token punctuation">(</span>增删改<span class="token punctuation">)</span>语句会自动提交一次事务。* 手动提交：* Oracle 数据库默认是手动提交事务* 需要先开启事务，再提交* 修改事务的默认提交方式：* 查看事务的默认提交方式：SELECT @@autocommit<span class="token punctuation">;</span> -- <span class="token number">1</span> 代表自动提交  <span class="token number">0</span> 代表手动提交* 修改默认提交方式： <span class="token builtin class-name">set</span> @@autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2</span>. 事务的四大特征：<span class="token number">1</span>. 原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。<span class="token number">2</span>. 持久性：当事务提交或回滚后，数据库会持久化的保存数据。<span class="token number">3</span>. 隔离性：多个事务之间。相互独立。<span class="token number">4</span>. 一致性：事务操作前后，数据总量不变<span class="token number">3</span>. 事务的隔离级别（了解）* 概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。* 存在问题：<span class="token number">1</span>. 脏读：一个事务，读取到另一个事务中没有提交的数据<span class="token number">2</span>. 不可重复读<span class="token punctuation">(</span>虚读<span class="token punctuation">)</span>：在同一个事务中，两次读取到的数据不一样。<span class="token number">3</span>. 幻读：一个事务操作<span class="token punctuation">(</span>DML<span class="token punctuation">)</span>数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。* 隔离级别：<span class="token number">1</span>. <span class="token builtin class-name">read</span> uncommitted：读未提交* 产生的问题：脏读、不可重复读、幻读<span class="token number">2</span>. <span class="token builtin class-name">read</span> committed：读已提交 （Oracle）* 产生的问题：不可重复读、幻读<span class="token number">3</span>. repeatable read：可重复读 （MySQL默认）* 产生的问题：幻读<span class="token number">4</span>. serializable：串行化* 可以解决所有的问题* 注意：隔离级别从小到大安全性越来越高，但是效率越来越低* 数据库查询隔离级别：* <span class="token keyword">select</span> @@tx_isolation<span class="token punctuation">;</span>* 数据库设置隔离级别：* <span class="token builtin class-name">set</span> global transaction isolation level  级别字符串<span class="token punctuation">;</span>* 演示：<span class="token builtin class-name">set</span> global transaction isolation level <span class="token builtin class-name">read</span> uncommitted<span class="token punctuation">;</span>start transaction<span class="token punctuation">;</span>-- 转账操作update account <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance - <span class="token number">500</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>update account <span class="token builtin class-name">set</span> balance <span class="token operator">=</span> balance + <span class="token number">500</span> where <span class="token function">id</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* SQL分类：<span class="token number">1</span>. DDL：操作数据库和表<span class="token number">2</span>. DML：增删改表中数据<span class="token number">3</span>. DQL：查询表中数据<span class="token number">4</span>. DCL：管理用户，授权* DBA：数据库管理员* DCL：管理用户，授权<span class="token number">1</span>. 管理用户<span class="token number">1</span>. 添加用户：* 语法：CREATE <span class="token environment constant">USER</span> <span class="token string">'用户名'</span>@<span class="token string">'主机名'</span> IDENTIFIED BY <span class="token string">'密码'</span><span class="token punctuation">;</span><span class="token number">2</span>. 删除用户：* 语法：DROP <span class="token environment constant">USER</span> <span class="token string">'用户名'</span>@<span class="token string">'主机名'</span><span class="token punctuation">;</span><span class="token number">3</span>. 修改用户密码：UPDATE <span class="token environment constant">USER</span> SET PASSWORD <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">'新密码'</span><span class="token punctuation">)</span> WHERE <span class="token environment constant">USER</span> <span class="token operator">=</span> <span class="token string">'用户名'</span><span class="token punctuation">;</span>UPDATE <span class="token environment constant">USER</span> SET PASSWORD <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span> WHERE <span class="token environment constant">USER</span> <span class="token operator">=</span> <span class="token string">'lisi'</span><span class="token punctuation">;</span>SET PASSWORD FOR <span class="token string">'用户名'</span>@<span class="token string">'主机名'</span> <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">'新密码'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SET PASSWORD FOR <span class="token string">'root'</span>@<span class="token string">'localhost'</span> <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>* mysql中忘记了root用户的密码？<span class="token number">1</span>. cmd -- <span class="token operator">&gt;</span> net stop mysql 停止mysql服务* 需要管理员运行该cmd<span class="token number">2</span>. 使用无验证方式启动mysql服务： mysqld --skip-grant-tables<span class="token number">3</span>. 打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功<span class="token number">4</span>. use mysql<span class="token punctuation">;</span><span class="token number">5</span>. update user <span class="token builtin class-name">set</span> password <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">'你的新密码'</span><span class="token punctuation">)</span> where user <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span><span class="token number">6</span>. 关闭两个窗口<span class="token number">7</span>. 打开任务管理器，手动结束mysqld.exe 的进程<span class="token number">8</span>. 启动mysql服务<span class="token number">9</span>. 使用新密码登录。<span class="token number">4</span>. 查询用户：-- <span class="token number">1</span>. 切换到mysql数据库USE myql<span class="token punctuation">;</span>-- <span class="token number">2</span>. 查询user表SELECT * FROM <span class="token environment constant">USER</span><span class="token punctuation">;</span>* 通配符： % 表示可以在任意主机使用用户登录数据库<span class="token number">2</span>. 权限管理：<span class="token number">1</span>. 查询权限：-- 查询权限SHOW GRANTS FOR <span class="token string">'用户名'</span>@<span class="token string">'主机名'</span><span class="token punctuation">;</span>SHOW GRANTS FOR <span class="token string">'lisi'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span><span class="token number">2</span>. 授予权限：-- 授予权限grant 权限列表 on 数据库名.表名 to <span class="token string">'用户名'</span>@<span class="token string">'主机名'</span><span class="token punctuation">;</span>-- 给张三用户授予所有权限，在任意数据库任意表上GRANT ALL ON *.* TO <span class="token string">'zhangsan'</span>@<span class="token string">'localhost'</span><span class="token punctuation">;</span><span class="token number">3</span>. 撤销权限：-- 撤销权限：revoke 权限列表 on 数据库名.表名 from <span class="token string">'用户名'</span>@<span class="token string">'主机名'</span><span class="token punctuation">;</span>REVOKE UPDATE ON db3.<span class="token variable"><span class="token variable">`</span>account<span class="token variable">`</span></span> FROM <span class="token string">'lisi'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JDBC："><a href="#JDBC：" class="headerlink" title="JDBC："></a>JDBC：</h4><p>​    1. 概念：Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库<br>​        * JDBC本质：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2</span>. 快速入门：* 步骤：<span class="token number">1</span>. 导入驱动jar包 mysql-connector-java-5.1.37-bin.jar<span class="token number">1</span>.复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下<span class="token number">2</span>.右键--<span class="token operator">&gt;</span>Add As Library<span class="token number">2</span>. 注册驱动<span class="token number">3</span>. 获取数据库连接对象 Connection<span class="token number">4</span>. 定义sql<span class="token number">5</span>. 获取执行sql语句的对象 Statement<span class="token number">6</span>. 执行sql，接受返回结果<span class="token number">7</span>. 处理结果<span class="token number">8</span>. 释放资源* 代码实现：  //1. 导入驱动jar包        //2.注册驱动        Class.forName<span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3.获取数据库连接对象        Connection conn <span class="token operator">=</span> DriverManager.getConnection<span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/db3"</span>, <span class="token string">"root"</span>, <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //4.定义sql语句        String sql <span class="token operator">=</span> <span class="token string">"update account set balance = 500 where id = 1"</span><span class="token punctuation">;</span>        //5.获取执行sql的对象 Statement        Statement stmt <span class="token operator">=</span> conn.createStatement<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //6.执行sql        int count <span class="token operator">=</span> stmt.executeUpdate<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        //7.处理结果        System.out.println<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        //8.释放资源        stmt.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conn.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span>. 详解各个对象：<span class="token number">1</span>. DriverManager：驱动管理对象* 功能：<span class="token number">1</span>. 注册驱动：告诉程序该使用哪一个数据库驱动jarstatic void registerDriver<span class="token punctuation">(</span>Driver driver<span class="token punctuation">)</span> :注册与给定的驱动程序 DriverManager 。 写代码使用：  Class.forName<span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块 static <span class="token punctuation">{</span>        try <span class="token punctuation">{</span>            java.sql.DriverManager.registerDriver<span class="token punctuation">(</span>new Driver<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException E<span class="token punctuation">)</span> <span class="token punctuation">{</span>            throw new RuntimeException<span class="token punctuation">(</span><span class="token string">"Can't register driver!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>注意：mysql5之后的驱动jar包可以省略注册驱动的步骤。<span class="token number">2</span>. 获取数据库连接：* 方法：static Connection getConnection<span class="token punctuation">(</span>String url, String user, String password<span class="token punctuation">)</span> * 参数：* url：指定连接的路径* 语法：jdbc:mysql://ip地址<span class="token punctuation">(</span>域名<span class="token punctuation">)</span>:端口号/数据库名称* 例子：jdbc:mysql://localhost:3306/db3* 细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称* user：用户名* password：密码 <span class="token number">2</span>. Connection：数据库连接对象<span class="token number">1</span>. 功能：<span class="token number">1</span>. 获取执行sql 的对象* Statement createStatement<span class="token punctuation">(</span><span class="token punctuation">)</span>* PreparedStatement prepareStatement<span class="token punctuation">(</span>String sql<span class="token punctuation">)</span>  <span class="token number">2</span>. 管理事务：* 开启事务：setAutoCommit<span class="token punctuation">(</span>boolean autoCommit<span class="token punctuation">)</span> ：调用该方法设置参数为false，即开启事务* 提交事务：commit<span class="token punctuation">(</span><span class="token punctuation">)</span> * 回滚事务：rollback<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token number">3</span>. Statement：执行sql的对象<span class="token number">1</span>. 执行sql<span class="token number">1</span>. boolean execute<span class="token punctuation">(</span>String sql<span class="token punctuation">)</span> ：可以执行任意的sql 了解 <span class="token number">2</span>. int executeUpdate<span class="token punctuation">(</span>String sql<span class="token punctuation">)</span> ：执行DML（insert、update、delete）语句、DDL<span class="token punctuation">(</span>create，alter、drop<span class="token punctuation">)</span>语句* 返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值<span class="token operator">&gt;</span><span class="token number">0</span>的则执行成功，反之，则失败。<span class="token number">3</span>. ResultSet executeQuery<span class="token punctuation">(</span>String sql<span class="token punctuation">)</span>  ：执行DQL（select<span class="token punctuation">)</span>语句<span class="token number">2</span>. 练习：<span class="token number">1</span>. account表 添加一条记录<span class="token number">2</span>. account表 修改记录<span class="token number">3</span>. account表 删除一条记录代码：Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            //1. 注册驱动            Class.forName<span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //2. 定义sql            String sql <span class="token operator">=</span> <span class="token string">"insert into account values(null,'王五',3000)"</span><span class="token punctuation">;</span>            //3.获取Connection对象            conn <span class="token operator">=</span> DriverManager.getConnection<span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///db3"</span>, <span class="token string">"root"</span>, <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //4.获取执行sql的对象 Statement            stmt <span class="token operator">=</span> conn.createStatement<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //5.执行sql            int count <span class="token operator">=</span> stmt.executeUpdate<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>//影响的行数            //6.处理结果            System.out.println<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            if<span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System.out.println<span class="token punctuation">(</span><span class="token string">"添加成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>else<span class="token punctuation">{</span>                System.out.println<span class="token punctuation">(</span><span class="token string">"添加失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>ClassNotFoundException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>finally <span class="token punctuation">{</span>            //stmt.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //7. 释放资源            //避免空指针异常            if<span class="token punctuation">(</span>stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                try <span class="token punctuation">{</span>                    stmt.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            if<span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                try <span class="token punctuation">{</span>                    conn.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token number">4</span>. ResultSet：结果集对象,封装查询结果* boolean next<span class="token punctuation">(</span><span class="token punctuation">)</span>: 游标向下移动一行，判断当前行是否是最后一行末尾<span class="token punctuation">(</span>是否有数据<span class="token punctuation">)</span>，如果是，则返回false，如果不是则返回true* getXxx<span class="token punctuation">(</span>参数<span class="token punctuation">)</span>:获取数据* Xxx：代表数据类型   如： int getInt<span class="token punctuation">(</span><span class="token punctuation">)</span> ,String getString<span class="token punctuation">(</span><span class="token punctuation">)</span>* 参数：<span class="token number">1</span>. int：代表列的编号,从1开始   如： getString<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">2</span>. String：代表列名称。 如： getDouble<span class="token punctuation">(</span><span class="token string">"balance"</span><span class="token punctuation">)</span>* 注意：* 使用步骤：<span class="token number">1</span>. 游标向下移动一行<span class="token number">2</span>. 判断是否有数据<span class="token number">3</span>. 获取数据   //循环判断游标是否是最后一行末尾。            while<span class="token punctuation">(</span>rs.next<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">{</span>                //获取数据                //6.2 获取数据                int <span class="token function">id</span> <span class="token operator">=</span> rs.getInt<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> rs.getString<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                double balance <span class="token operator">=</span> rs.getDouble<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System.out.println<span class="token punctuation">(</span>id + <span class="token string">"---"</span> + name + <span class="token string">"---"</span> + balance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>* 练习：* 定义一个方法，查询emp表的数据将其封装为对象，然后装载集合，返回。<span class="token number">1</span>. 定义Emp类<span class="token number">2</span>. 定义方法 public List<span class="token operator">&lt;</span>Emp<span class="token operator">&gt;</span> <span class="token function-name function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token number">3</span>. 实现方法 <span class="token keyword">select</span> * from emp<span class="token punctuation">;</span><span class="token number">5</span>. PreparedStatement：执行sql的对象<span class="token number">1</span>. SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题<span class="token number">1</span>. 输入用户随便，输入密码：a<span class="token string">' or '</span>a<span class="token string">' = '</span>a<span class="token number">2</span>. sql：select * from user where username <span class="token operator">=</span> <span class="token string">'fhdsjkf'</span> and password <span class="token operator">=</span> <span class="token string">'a'</span> or <span class="token string">'a'</span> <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token number">2</span>. 解决sql注入问题：使用PreparedStatement对象来解决<span class="token number">3</span>. 预编译的SQL：参数使用?作为占位符<span class="token number">4</span>. 步骤：<span class="token number">1</span>. 导入驱动jar包 mysql-connector-java-5.1.37-bin.jar<span class="token number">2</span>. 注册驱动<span class="token number">3</span>. 获取数据库连接对象 Connection<span class="token number">4</span>. 定义sql* 注意：sql的参数使用？作为占位符。 如：select * from user where username <span class="token operator">=</span> ? and password <span class="token operator">=</span> ?<span class="token punctuation">;</span><span class="token number">5</span>. 获取执行sql语句的对象 PreparedStatement  Connection.prepareStatement<span class="token punctuation">(</span>String sql<span class="token punctuation">)</span> <span class="token number">6</span>. 给？赋值：* 方法： setXxx<span class="token punctuation">(</span>参数1,参数2<span class="token punctuation">)</span>* 参数1：？的位置编号 从1 开始* 参数2：？的值<span class="token number">7</span>. 执行sql，接受返回结果，不需要传递sql语句<span class="token number">8</span>. 处理结果<span class="token number">9</span>. 释放资源<span class="token number">5</span>. 注意：后期都会使用PreparedStatement来完成增删改查的所有操作<span class="token number">1</span>. 可以防止SQL注入<span class="token number">2</span>. 效率更高<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="抽取JDBC工具类-：-JDBCUtils"><a href="#抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="抽取JDBC工具类 ： JDBCUtils"></a>抽取JDBC工具类 ： JDBCUtils</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* 目的：简化书写* 分析：<span class="token number">1</span>. 注册驱动也抽取<span class="token number">2</span>. 抽取一个方法获取连接对象* 需求：不想传递参数（麻烦），还得保证工具类的通用性。* 解决：配置文件jdbc.properties<span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token assign-left variable">password</span><span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">3</span>. 抽取一个方法释放资源* 代码实现：public class JDBCUtils <span class="token punctuation">{</span>    private static String url<span class="token punctuation">;</span>    private static String user<span class="token punctuation">;</span>    private static String password<span class="token punctuation">;</span>    private static String driver<span class="token punctuation">;</span>    /**     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块     */    static<span class="token punctuation">{</span>        //读取资源文件，获取值。        try <span class="token punctuation">{</span>            //1. 创建Properties集合类。            Properties pro <span class="token operator">=</span> new Properties<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //获取src路径下的文件的方式---<span class="token operator">&gt;</span>ClassLoader 类加载器            ClassLoader classLoader <span class="token operator">=</span> JDBCUtils.class.getClassLoader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            URL res  <span class="token operator">=</span> classLoader.getResource<span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String path <span class="token operator">=</span> res.getPath<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>///D:/IdeaProjects/itcast/out/production/day04_jdbc/jdbc.properties            //2. 加载文件           // pro.load<span class="token punctuation">(</span>new FileReader<span class="token punctuation">(</span><span class="token string">"D:<span class="token entity" title="\\">\\</span>IdeaProjects<span class="token entity" title="\\">\\</span>itcast<span class="token entity" title="\\">\\</span>day04_jdbc<span class="token entity" title="\\">\\</span>src<span class="token entity" title="\\">\\</span>jdbc.properties"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            pro.load<span class="token punctuation">(</span>new FileReader<span class="token punctuation">(</span>path<span class="token punctuation">))</span><span class="token punctuation">;</span>            //3. 获取数据，赋值            url <span class="token operator">=</span> pro.getProperty<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user <span class="token operator">=</span> pro.getProperty<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            password <span class="token operator">=</span> pro.getProperty<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            driver <span class="token operator">=</span> pro.getProperty<span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //4. 注册驱动            Class.forName<span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>ClassNotFoundException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/** * 获取连接 * @return 连接对象 */public static Connection getConnection<span class="token punctuation">(</span><span class="token punctuation">)</span> throws SQLException <span class="token punctuation">{</span>    <span class="token builtin class-name">return</span> DriverManager.getConnection<span class="token punctuation">(</span>url, user, password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>/** * 释放资源 * @param stmt * @param conn */public static void close<span class="token punctuation">(</span>Statement stmt,Connection conn<span class="token punctuation">)</span><span class="token punctuation">{</span>    if<span class="token punctuation">(</span> stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        try <span class="token punctuation">{</span>            stmt.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    if<span class="token punctuation">(</span> conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        try <span class="token punctuation">{</span>            conn.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">    /**     * 释放资源     * @param stmt     * @param conn     */    public static void close<span class="token punctuation">(</span>ResultSet rs,Statement stmt, Connection conn<span class="token punctuation">)</span><span class="token punctuation">{</span>        if<span class="token punctuation">(</span> rs <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            try <span class="token punctuation">{</span>                rs.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        if<span class="token punctuation">(</span> stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            try <span class="token punctuation">{</span>                stmt.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        if<span class="token punctuation">(</span> conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            try <span class="token punctuation">{</span>                conn.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>* 练习：* 需求：<span class="token number">1</span>. 通过键盘录入用户名和密码<span class="token number">2</span>. 判断用户是否登录成功* <span class="token keyword">select</span> * from user where username <span class="token operator">=</span> <span class="token string">""</span> and password <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>* 如果这个sql有查询结果，则成功，反之，则失败* 步骤：<span class="token number">1</span>. 创建数据库表 userCREATE TABLE <span class="token environment constant">USER</span><span class="token punctuation">(</span><span class="token function">id</span> INT PRIMARY KEY AUTO_INCREMENT,username VARCHAR<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>,PASSWORD VARCHAR<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>INSERT INTO <span class="token environment constant">USER</span> VALUES<span class="token punctuation">(</span>NULL,<span class="token string">'zhangsan'</span>,<span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>INSERT INTO <span class="token environment constant">USER</span> VALUES<span class="token punctuation">(</span>NULL,<span class="token string">'lisi'</span>,<span class="token string">'234'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span>. 代码实现：public class JDBCDemo9 <span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        //1.键盘录入，接受用户名和密码        Scanner sc <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"请输入用户名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> sc.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> sc.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2.调用方法        boolean flag <span class="token operator">=</span> new JDBCDemo9<span class="token punctuation">(</span><span class="token punctuation">)</span>.login<span class="token punctuation">(</span>username, password<span class="token punctuation">)</span><span class="token punctuation">;</span>        //3.判断结果，输出不同语句        if<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            //登录成功            System.out.println<span class="token punctuation">(</span><span class="token string">"登录成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>else<span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"用户名或密码错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<br>​                </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/** * 登录方法 */public boolean login<span class="token punctuation">(</span>String username ,String password<span class="token punctuation">)</span><span class="token punctuation">{</span>    if<span class="token punctuation">(</span>username <span class="token operator">==</span> null <span class="token operator">||</span> password <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //连接数据库判断是否登录成功    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    Statement stmt <span class="token operator">=</span>  null<span class="token punctuation">;</span>    ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>    //1.获取连接    try <span class="token punctuation">{</span>        conn <span class="token operator">=</span>  JDBCUtils.getConnection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2.定义sql        String sql <span class="token operator">=</span> <span class="token string">"select * from user where username = '"</span>+username+<span class="token string">"' and password = '"</span>+password+<span class="token string">"' "</span><span class="token punctuation">;</span>        //3.获取执行sql的对象        stmt <span class="token operator">=</span> conn.createStatement<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //4.执行查询        rs <span class="token operator">=</span> stmt.executeQuery<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        //5.判断       /* if<span class="token punctuation">(</span>rs.next<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">{</span>//如果有下一行，则返回true            <span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>else<span class="token punctuation">{</span>            <span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>*/       <span class="token builtin class-name">return</span> rs.next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//如果有下一行，则返回true    <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>finally <span class="token punctuation">{</span>        JDBCUtils.close<span class="token punctuation">(</span>rs,stmt,conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JDBC控制事务："><a href="#JDBC控制事务：" class="headerlink" title="JDBC控制事务："></a>JDBC控制事务：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。<span class="token number">2</span>. 操作：<span class="token number">1</span>. 开启事务<span class="token number">2</span>. 提交事务<span class="token number">3</span>. 回滚事务<span class="token number">3</span>. 使用Connection对象来管理事务* 开启事务：setAutoCommit<span class="token punctuation">(</span>boolean autoCommit<span class="token punctuation">)</span> ：调用该方法设置参数为false，即开启事务* 在执行sql之前开启事务* 提交事务：commit<span class="token punctuation">(</span><span class="token punctuation">)</span> * 当所有sql都执行完提交事务* 回滚事务：rollback<span class="token punctuation">(</span><span class="token punctuation">)</span> * 在catch中回滚事务<span class="token number">4</span>. 代码：public class JDBCDemo10 <span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement pstmt1 <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement pstmt2 <span class="token operator">=</span> null<span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            //1.获取连接            conn <span class="token operator">=</span> JDBCUtils.getConnection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //开启事务            conn.setAutoCommit<span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>            //2.定义sql            //2.1 张三 - <span class="token number">500</span>            String sql1 <span class="token operator">=</span> <span class="token string">"update account set balance = balance - ? where id = ?"</span><span class="token punctuation">;</span>            //2.2 李四 + <span class="token number">500</span>            String sql2 <span class="token operator">=</span> <span class="token string">"update account set balance = balance + ? where id = ?"</span><span class="token punctuation">;</span>            //3.获取执行sql对象            pstmt1 <span class="token operator">=</span> conn.prepareStatement<span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt2 <span class="token operator">=</span> conn.prepareStatement<span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span>            //4. 设置参数            pstmt1.setDouble<span class="token punctuation">(</span><span class="token number">1,500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt1.setInt<span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt2.setDouble<span class="token punctuation">(</span><span class="token number">1,500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt2.setInt<span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //5.执行sql            pstmt1.executeUpdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            // 手动制造异常            int i <span class="token operator">=</span> <span class="token number">3</span>/0<span class="token punctuation">;</span>            pstmt2.executeUpdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //提交事务            conn.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            //事务回滚            try <span class="token punctuation">{</span>                if<span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    conn.rollback<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e1.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>finally <span class="token punctuation">{</span>            JDBCUtils.close<span class="token punctuation">(</span>pstmt1,conn<span class="token punctuation">)</span><span class="token punctuation">;</span>            JDBCUtils.close<span class="token punctuation">(</span>pstmt2,null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. 概念：其实就是一个容器<span class="token punctuation">(</span>集合<span class="token punctuation">)</span>，存放数据库连接的容器。    当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。<span class="token number">2</span>. 好处：<span class="token number">1</span>. 节约资源<span class="token number">2</span>. 用户访问高效<span class="token number">3</span>. 实现：<span class="token number">1</span>. 标准接口：DataSource   javax.sql包下的<span class="token number">1</span>. 方法：* 获取连接：getConnection<span class="token punctuation">(</span><span class="token punctuation">)</span>* 归还连接：Connection.close<span class="token punctuation">(</span><span class="token punctuation">)</span>。如果连接对象Connection是从连接池中获取的，那么调用Connection.close<span class="token punctuation">(</span><span class="token punctuation">)</span>方法，则不会再关闭连接了。而是归还连接<span class="token number">2</span>. 一般我们不去实现它，有数据库厂商来实现<span class="token number">1</span>. C3P0：数据库连接池技术<span class="token number">2</span>. Druid：数据库连接池实现技术，由阿里巴巴提供的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">4</span>. C3P0：数据库连接池技术* 步骤：<span class="token number">1</span>. 导入jar包 <span class="token punctuation">(</span>两个<span class="token punctuation">)</span> c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar ，* 不要忘记导入数据库驱动jar包<span class="token number">2</span>. 定义配置文件：* 名称： c3p0.properties 或者 c3p0-config.xml* 路径：直接将文件放在src目录下即可。<span class="token number">3</span>. 创建核心对象 数据库连接池对象 ComboPooledDataSource<span class="token number">4</span>. 获取连接： getConnection* 代码： //1.创建数据库连接池对象        DataSource ds  <span class="token operator">=</span> new ComboPooledDataSource<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2. 获取连接对象        Connection conn <span class="token operator">=</span> ds.getConnection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">5</span>. Druid：数据库连接池实现技术，由阿里巴巴提供的<span class="token number">1</span>. 步骤：<span class="token number">1</span>. 导入jar包 druid-1.0.9.jar<span class="token number">2</span>. 定义配置文件：* 是properties形式的* 可以叫任意名称，可以放在任意目录下<span class="token number">3</span>. 加载配置文件。Properties<span class="token number">4</span>. 获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory<span class="token number">5</span>. 获取连接：getConnection* 代码： //3.加载配置文件        Properties pro <span class="token operator">=</span> new Properties<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream is <span class="token operator">=</span> DruidDemo.class.getClassLoader<span class="token punctuation">(</span><span class="token punctuation">)</span>.getResourceAsStream<span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro.load<span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        //4.获取连接池对象        DataSource ds <span class="token operator">=</span> DruidDataSourceFactory.createDataSource<span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>        //5.获取连接        Connection conn <span class="token operator">=</span> ds.getConnection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span>. 定义工具类<span class="token number">1</span>. 定义一个类 JDBCUtils<span class="token number">2</span>. 提供静态代码块加载配置文件，初始化连接池对象<span class="token number">3</span>. 提供方法<span class="token number">1</span>. 获取连接方法：通过数据库连接池获取连接<span class="token number">2</span>. 释放资源<span class="token number">3</span>. 获取连接池的方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* 代码：public class JDBCUtils <span class="token punctuation">{</span>    //1.定义成员变量 DataSource    private static DataSource ds <span class="token punctuation">;</span>    static<span class="token punctuation">{</span>        try <span class="token punctuation">{</span>            //1.加载配置文件            Properties pro <span class="token operator">=</span> new Properties<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pro.load<span class="token punctuation">(</span>JDBCUtils.class.getClassLoader<span class="token punctuation">(</span><span class="token punctuation">)</span>.getResourceAsStream<span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            //2.获取DataSource            ds <span class="token operator">=</span> DruidDataSourceFactory.createDataSource<span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    /**     * 获取连接     */    public static Connection getConnection<span class="token punctuation">(</span><span class="token punctuation">)</span> throws SQLException <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> ds.getConnection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    /**     * 释放资源     */    public static void close<span class="token punctuation">(</span>Statement stmt,Connection conn<span class="token punctuation">)</span><span class="token punctuation">{</span>       /* if<span class="token punctuation">(</span>stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            try <span class="token punctuation">{</span>                stmt.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        if<span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            try <span class="token punctuation">{</span>                conn.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//归还连接            <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>*/       close<span class="token punctuation">(</span>null,stmt,conn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public static void close<span class="token punctuation">(</span>ResultSet rs , Statement stmt, Connection conn<span class="token punctuation">)</span><span class="token punctuation">{</span>                                  if<span class="token punctuation">(</span>rs <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            try <span class="token punctuation">{</span>                rs.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         if<span class="token punctuation">(</span>stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            try <span class="token punctuation">{</span>                stmt.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        if<span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            try <span class="token punctuation">{</span>                conn.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//归还连接            <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    /**     * 获取连接池方法     */    public static DataSource <span class="token function-name function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token builtin class-name">return</span>  ds<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​            </p><h4 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发* 步骤：<span class="token number">1</span>. 导入jar包<span class="token number">2</span>. 创建JdbcTemplate对象。依赖于数据源DataSource* JdbcTemplate template <span class="token operator">=</span> new JdbcTemplate<span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span>. 调用JdbcTemplate的方法来完成CRUD的操作* update<span class="token punctuation">(</span><span class="token punctuation">)</span>:执行DML语句。增、删、改语句* queryForMap<span class="token punctuation">(</span><span class="token punctuation">)</span>:查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合* 注意：这个方法查询的结果集长度只能是1* queryForList<span class="token punctuation">(</span><span class="token punctuation">)</span>:查询结果将结果集封装为list集合* 注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中* query<span class="token punctuation">(</span><span class="token punctuation">)</span>:查询结果，将结果封装为JavaBean对象* query的参数：RowMapper* 一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装* new BeanPropertyRowMapper<span class="token operator">&lt;</span>类型<span class="token operator">&gt;</span><span class="token punctuation">(</span>类型.class<span class="token punctuation">)</span>* queryForObject：查询结果，将结果封装为对象* 一般用于聚合函数的查询<span class="token number">4</span>. 练习：* 需求：<span class="token number">1</span>. 修改1号数据的 salary 为 <span class="token number">10000</span><span class="token number">2</span>. 添加一条记录<span class="token number">3</span>. 删除刚才添加的记录<span class="token number">4</span>. 查询id为1的记录，将其封装为Map集合<span class="token number">5</span>. 查询所有记录，将其封装为List<span class="token number">6</span>. 查询所有记录，将其封装为Emp对象的List集合<span class="token number">7</span>. 查询总记录数* 代码：<span class="token function">import</span> cn.itcast.domain.Emp<span class="token punctuation">;</span><span class="token function">import</span> cn.itcast.utils.JDBCUtils<span class="token punctuation">;</span><span class="token function">import</span> org.junit.Test<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.jdbc.core.RowMapper<span class="token punctuation">;</span><span class="token function">import</span> java.sql.Date<span class="token punctuation">;</span><span class="token function">import</span> java.sql.ResultSet<span class="token punctuation">;</span><span class="token function">import</span> java.sql.SQLException<span class="token punctuation">;</span><span class="token function">import</span> java.util.List<span class="token punctuation">;</span><span class="token function">import</span> java.util.Map<span class="token punctuation">;</span>public class JdbcTemplateDemo2 <span class="token punctuation">{</span>    //Junit单元测试，可以让方法独立执行       //1. 获取JDBCTemplate对象    private JdbcTemplate template <span class="token operator">=</span> new JdbcTemplate<span class="token punctuation">(</span>JDBCUtils.getDataSource<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>    /**     * <span class="token number">1</span>. 修改1号数据的 salary 为 <span class="token number">10000</span>     */    @Test    public void <span class="token function-name function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">          //2. 定义sql    String sql <span class="token operator">=</span> <span class="token string">"update emp set salary = 10000 where id = 1001"</span><span class="token punctuation">;</span>    //3. 执行sql    int count <span class="token operator">=</span> template.update<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>/** * <span class="token number">2</span>. 添加一条记录 */@Testpublic void <span class="token function-name function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"insert into emp(id,ename,dept_id) values(?,?,?)"</span><span class="token punctuation">;</span>    int count <span class="token operator">=</span> template.update<span class="token punctuation">(</span>sql, <span class="token number">1015</span>, <span class="token string">"郭靖"</span>, <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>/** * <span class="token number">3</span>.删除刚才添加的记录 */@Testpublic void <span class="token function-name function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"delete from emp where id = ?"</span><span class="token punctuation">;</span>    int count <span class="token operator">=</span> template.update<span class="token punctuation">(</span>sql, <span class="token number">1015</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>/** * <span class="token number">4</span>.查询id为1001的记录，将其封装为Map集合 * 注意：这个方法查询的结果集长度只能是1 */@Testpublic void <span class="token function-name function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"select * from emp where id = ? or id = ?"</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String, Object<span class="token operator">&gt;</span> map <span class="token operator">=</span> template.queryForMap<span class="token punctuation">(</span>sql, <span class="token number">1001,1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System.out.println<span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    //<span class="token punctuation">{</span>id<span class="token operator">=</span><span class="token number">1001</span>, <span class="token assign-left variable">ename</span><span class="token operator">=</span>孙悟空, <span class="token assign-left variable">job_id</span><span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">mgr</span><span class="token operator">=</span><span class="token number">1004</span>, <span class="token assign-left variable">joindate</span><span class="token operator">=</span><span class="token number">2000</span>-12-17, <span class="token assign-left variable">salary</span><span class="token operator">=</span><span class="token number">10000.00</span>, <span class="token assign-left variable">bonus</span><span class="token operator">=</span>null, <span class="token assign-left variable">dept_id</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">}</span>/** * <span class="token number">5</span>. 查询所有记录，将其封装为List */@Testpublic void <span class="token function-name function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"select * from emp"</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String, Object<span class="token operator">&gt;&gt;</span> list <span class="token operator">=</span> template.queryForList<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String, Object<span class="token operator">&gt;</span> stringObjectMap <span class="token builtin class-name">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span>stringObjectMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>/** * <span class="token number">6</span>. 查询所有记录，将其封装为Emp对象的List集合 */@Testpublic void <span class="token function-name function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"select * from emp"</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Emp<span class="token operator">&gt;</span> list <span class="token operator">=</span> template.query<span class="token punctuation">(</span>sql, new RowMapper<span class="token operator">&lt;</span>Emp<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        @Override        public Emp mapRow<span class="token punctuation">(</span>ResultSet rs, int i<span class="token punctuation">)</span> throws SQLException <span class="token punctuation">{</span>            Emp emp <span class="token operator">=</span> new Emp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            int <span class="token function">id</span> <span class="token operator">=</span> rs.getInt<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String ename <span class="token operator">=</span> rs.getString<span class="token punctuation">(</span><span class="token string">"ename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            int job_id <span class="token operator">=</span> rs.getInt<span class="token punctuation">(</span><span class="token string">"job_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            int mgr <span class="token operator">=</span> rs.getInt<span class="token punctuation">(</span><span class="token string">"mgr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Date joindate <span class="token operator">=</span> rs.getDate<span class="token punctuation">(</span><span class="token string">"joindate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            double salary <span class="token operator">=</span> rs.getDouble<span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            double bonus <span class="token operator">=</span> rs.getDouble<span class="token punctuation">(</span><span class="token string">"bonus"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            int dept_id <span class="token operator">=</span> rs.getInt<span class="token punctuation">(</span><span class="token string">"dept_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            emp.setId<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            emp.setEname<span class="token punctuation">(</span>ename<span class="token punctuation">)</span><span class="token punctuation">;</span>            emp.setJob_id<span class="token punctuation">(</span>job_id<span class="token punctuation">)</span><span class="token punctuation">;</span>            emp.setMgr<span class="token punctuation">(</span>mgr<span class="token punctuation">)</span><span class="token punctuation">;</span>            emp.setJoindate<span class="token punctuation">(</span>joindate<span class="token punctuation">)</span><span class="token punctuation">;</span>            emp.setSalary<span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>            emp.setBonus<span class="token punctuation">(</span>bonus<span class="token punctuation">)</span><span class="token punctuation">;</span>            emp.setDept_id<span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token builtin class-name">return</span> emp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​                </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">        <span class="token keyword">for</span> <span class="token punctuation">(</span>Emp emp <span class="token builtin class-name">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    /**     * <span class="token number">6</span>. 查询所有记录，将其封装为Emp对象的List集合     */    @Test    public void <span class="token function-name function">test6_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from emp"</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Emp<span class="token operator">&gt;</span> list <span class="token operator">=</span> template.query<span class="token punctuation">(</span>sql, new BeanPropertyRowMapper<span class="token operator">&lt;</span>Emp<span class="token operator">&gt;</span><span class="token punctuation">(</span>Emp.class<span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Emp emp <span class="token builtin class-name">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    /**     * <span class="token number">7</span>. 查询总记录数     */    @Test    public void <span class="token function-name function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select count(id) from emp"</span><span class="token punctuation">;</span>        Long total <span class="token operator">=</span> template.queryForObject<span class="token punctuation">(</span>sql, Long.class<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> java </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库加控制台简单学生管理系统</title>
      <link href="posts/e3e08109.html"/>
      <url>posts/e3e08109.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>项目结构图<br><img src="/posts/e3e08109/1.png" alt="1"><br>效果图<br><img src="/posts/e3e08109/2.png" alt="2"></p><p>首先建学生表</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">create table student<span class="token punctuation">(</span>    <span class="token function">id</span>      int<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> auto_increment        primary key,    stuid  varchar<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>    null,    stuname varchar<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>    null,    <span class="token builtin class-name">pwd</span>    varchar<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>    null,    math    int default <span class="token string">'0'</span> null,    eng    int default <span class="token string">'0'</span> null,    java    int default <span class="token string">'0'</span> null,    class  int default <span class="token string">'0'</span> null<span class="token punctuation">)</span>    charset <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后建老师表</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">create table teacher<span class="token punctuation">(</span>    <span class="token function">id</span>        int<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> auto_increment        primary key,    teacherid varchar<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>    null,    <span class="token builtin class-name">pwd</span>      varchar<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>    null,    class    int default <span class="token string">'0'</span> null<span class="token punctuation">)</span>    charset <span class="token operator">=</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现的功能有：</p><ul><li>教师登陆<br>1、学生信息添加<br>2、学生信息查看<br>3、学生信息删除<br>4、学生信息查询<br>5、学生信息排名<br>6、教师修改密码</li><li>教师注册</li><li>学生登陆<br>1、信息查看<br>2、信息修改</li><li>退出</li></ul><p>denglu-&gt;studentdenglu</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">package com.itcat.denglu<span class="token punctuation">;</span><span class="token function">import</span> com.itcat.mysql.JDBCUnity<span class="token punctuation">;</span><span class="token function">import</span> java.sql.Connection<span class="token punctuation">;</span><span class="token function">import</span> java.sql.PreparedStatement<span class="token punctuation">;</span><span class="token function">import</span> java.sql.ResultSet<span class="token punctuation">;</span><span class="token function">import</span> java.sql.SQLException<span class="token punctuation">;</span><span class="token function">import</span> java.util.*<span class="token punctuation">;</span>public class studentdenglu <span class="token punctuation">{</span>    Map map <span class="token operator">=</span> new HashMap<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String pwd1 <span class="token operator">=</span> null<span class="token punctuation">;</span>    String id1 <span class="token operator">=</span> null<span class="token punctuation">;</span>    int ID <span class="token punctuation">;</span>    public void <span class="token function-name function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement <span class="token function">ps</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            con <span class="token operator">=</span> JDBCUnity.getconnection<span class="token punctuation">(</span><span class="token string">"studentdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"select stuid,pwd from student where id&gt;=?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps.setObject<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> ps.executeQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs.next<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>                map.put<span class="token punctuation">(</span>rs.getObject<span class="token punctuation">(</span><span class="token string">"stuid"</span><span class="token punctuation">)</span>,rs.getObject<span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public int denglu<span class="token punctuation">(</span><span class="token punctuation">)</span> throws SQLException, ClassNotFoundException <span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement <span class="token function">ps</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        int f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map.isEmpty<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>目前还没有学生！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>else <span class="token punctuation">{</span>            System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入学号:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            id1 <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Set <span class="token builtin class-name">set</span> <span class="token operator">=</span> map.keySet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Iterator it <span class="token operator">=</span> set.iterator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>it.hasNext<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>it.next<span class="token punctuation">(</span><span class="token punctuation">)</span>.equals<span class="token punctuation">(</span>id1<span class="token punctuation">))</span><span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入密码:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        pwd1 <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>pwd1.equals<span class="token punctuation">(</span>map.get<span class="token punctuation">(</span>id1<span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            con <span class="token operator">=</span> JDBCUnity.getconnection<span class="token punctuation">(</span><span class="token string">"studentdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"select id from student where stuid=? and pwd=?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            ps.setString<span class="token punctuation">(</span><span class="token number">1</span>, id1<span class="token punctuation">)</span><span class="token punctuation">;</span>                            ps.setString<span class="token punctuation">(</span><span class="token number">2</span>, pwd1<span class="token punctuation">)</span><span class="token punctuation">;</span>                            rs <span class="token operator">=</span> ps.executeQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs.next<span class="token punctuation">(</span><span class="token punctuation">))</span>                                ID <span class="token operator">=</span> rs.getInt<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            f <span class="token operator">=</span> ID<span class="token punctuation">;</span>                            <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>密码错误！！请重新输入！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>无此账号!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            try <span class="token punctuation">{</span>                Thread.sleep<span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token builtin class-name">return</span> f<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>denglu-&gt;tecaherdenglu</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">package com.itcat.denglu<span class="token punctuation">;</span><span class="token function">import</span> com.itcat.mysql.JDBCUnity<span class="token punctuation">;</span><span class="token function">import</span> com.itcat.server.TeacherDemo<span class="token punctuation">;</span><span class="token function">import</span> java.sql.Connection<span class="token punctuation">;</span><span class="token function">import</span> java.sql.PreparedStatement<span class="token punctuation">;</span><span class="token function">import</span> java.sql.ResultSet<span class="token punctuation">;</span><span class="token function">import</span> java.util.ArrayList<span class="token punctuation">;</span><span class="token function">import</span> java.util.List<span class="token punctuation">;</span><span class="token function">import</span> java.util.Scanner<span class="token punctuation">;</span>public class teacherdenglu <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>TeacherDemo<span class="token operator">&gt;</span> list <span class="token operator">=</span> new ArrayList<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    public void <span class="token function-name function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement <span class="token function">ps</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            con <span class="token operator">=</span> JDBCUnity.getconnection<span class="token punctuation">(</span><span class="token string">"teacherdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"select teacherid,pwd,class from teacher where id&gt;=0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> ps.executeQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs.next<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>                TeacherDemo teacherDemo <span class="token operator">=</span> new TeacherDemo<span class="token punctuation">(</span>rs.getString<span class="token punctuation">(</span><span class="token string">"teacherid"</span><span class="token punctuation">)</span>,rs.getString<span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span>                        ,rs.getInt<span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                list.add<span class="token punctuation">(</span>teacherDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public int denglu<span class="token punctuation">(</span><span class="token punctuation">)</span> throws InterruptedException <span class="token punctuation">{</span>        list.clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        int f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        String pwd1 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list.isEmpty<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>目前还没有教师注册!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>else<span class="token punctuation">{</span>            Scanner scanner <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入账号:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String <span class="token function">id</span> <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>TeacherDemo t:list            <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t.getId<span class="token punctuation">(</span><span class="token punctuation">)</span>.equals<span class="token punctuation">(</span>id<span class="token punctuation">))</span><span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入密码:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        pwd1 <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>pwd1.equals<span class="token punctuation">(</span>t.getPwd<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            f <span class="token operator">=</span> t.getClassid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>else <span class="token punctuation">{</span>                            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>密码错误，请重新输入！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>无此账号!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread.sleep<span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token builtin class-name">return</span> f<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>denglu-&gt;zhucetecaher</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">package com.itcat.denglu<span class="token punctuation">;</span><span class="token function">import</span> com.itcat.menu.Checkid<span class="token punctuation">;</span><span class="token function">import</span> com.itcat.mysql.JDBCUnity<span class="token punctuation">;</span><span class="token function">import</span> java.sql.*<span class="token punctuation">;</span><span class="token function">import</span> java.util.Scanner<span class="token punctuation">;</span>public class zhucetecaher <span class="token punctuation">{</span>    public void <span class="token function-name function">zhuce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>注册教师账号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement <span class="token function">ps</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            con <span class="token operator">=</span> JDBCUnity.getconnection<span class="token punctuation">(</span><span class="token string">"teacherdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"insert into teacher (teacherid,pwd,class) values (?,?,?)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入账号:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String <span class="token function">id</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">id</span> <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                boolean f <span class="token operator">=</span> new Checkid<span class="token punctuation">(</span>id<span class="token punctuation">)</span>.checkteacher<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>账号重复，请重新输入！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入账号:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            ps.setObject<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token function">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入密码:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String <span class="token builtin class-name">pwd</span> <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps.setObject<span class="token punctuation">(</span><span class="token number">2</span>, <span class="token builtin class-name">pwd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>班级:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            int classid <span class="token operator">=</span> scanner.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps.setObject<span class="token punctuation">(</span><span class="token number">3</span>, classid<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps.execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>menu-&gt;Checkid</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">import</span> java.util.ArrayList<span class="token punctuation">;</span><span class="token function">import</span> java.util.List<span class="token punctuation">;</span>public class Checkid <span class="token punctuation">{</span>    private String <span class="token function">id</span><span class="token punctuation">;</span>    public Checkid<span class="token punctuation">(</span>String <span class="token function">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        this.id <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> checklist <span class="token operator">=</span> new ArrayList<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    public boolean <span class="token function-name function">checkstudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        checklist.clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        boolean f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement <span class="token function">ps</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            con <span class="token operator">=</span> JDBCUnity.getconnection<span class="token punctuation">(</span><span class="token string">"studentdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"select stuid from student where id&gt;=?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps.setObject<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> ps.executeQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs.next<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>                checklist.add<span class="token punctuation">(</span>rs.getString<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String t:checklist        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t.equals<span class="token punctuation">(</span>id<span class="token punctuation">))</span><span class="token punctuation">{</span>                f <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token builtin class-name">return</span> f<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public boolean <span class="token function-name function">checkteacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        checklist.clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        boolean f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement <span class="token function">ps</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            con <span class="token operator">=</span> JDBCUnity.getconnection<span class="token punctuation">(</span><span class="token string">"teacherdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"select teacherid from teacher where id&gt;=?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps.setObject<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> ps.executeQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs.next<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>                checklist.add<span class="token punctuation">(</span>rs.getString<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String t:checklist        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t.equals<span class="token punctuation">(</span>id<span class="token punctuation">))</span><span class="token punctuation">{</span>                f <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token builtin class-name">return</span> f<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>menu-&gt;Stumenu</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">package com.itcat.menu<span class="token punctuation">;</span><span class="token function">import</span> com.itcat.mysql.JDBCUnity<span class="token punctuation">;</span><span class="token function">import</span> java.sql.Connection<span class="token punctuation">;</span><span class="token function">import</span> java.sql.PreparedStatement<span class="token punctuation">;</span><span class="token function">import</span> java.sql.ResultSet<span class="token punctuation">;</span><span class="token function">import</span> java.util.Scanner<span class="token punctuation">;</span>@SuppressWarnings<span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>public class Stumenu <span class="token punctuation">{</span>    int ID<span class="token punctuation">;</span>    public Stumenu<span class="token punctuation">(</span>Integer ID<span class="token punctuation">)</span><span class="token punctuation">{</span>        this.ID <span class="token operator">=</span> ID<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void <span class="token function-name function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        int choice<span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------1.信息查看----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------2.信息修改----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------0.退出    ----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入你要进行的操作:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            choice <span class="token operator">=</span> scanner.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            switch <span class="token punctuation">(</span>choice<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">1</span>:                    see<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span>:                    change<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public void <span class="token function-name function">see</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement <span class="token function">ps</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            con <span class="token operator">=</span> JDBCUnity.getconnection<span class="token punctuation">(</span><span class="token string">"studentdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"select * from student where id=?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps.setInt<span class="token punctuation">(</span><span class="token number">1</span>,ID<span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> ps.executeQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"*********************************************************************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs.next<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>                int <span class="token function">sum</span> <span class="token operator">=</span> rs.getInt<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>+rs.getInt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>+rs.getInt<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>|学号："</span> + rs.getString<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> + <span class="token string">"|"</span> + <span class="token string">"姓名："</span> + rs.getString<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> + <span class="token string">"|"</span> + <span class="token string">"密码："</span> +                        rs.getString<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> + <span class="token string">"|"</span> + <span class="token string">"数学："</span> + rs.getInt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> + <span class="token string">"|"</span> + <span class="token string">"英语："</span> + rs.getInt<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> + <span class="token string">"|"</span> +                        <span class="token string">"Java："</span> + rs.getInt<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> + <span class="token string">"|"</span> + <span class="token string">"Sum："</span> + sum+ <span class="token string">"|"</span>+ <span class="token string">"班级："</span> + rs.getInt<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>+ <span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"*********************************************************************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public void <span class="token function-name function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        int choice<span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement <span class="token function">ps</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            con <span class="token operator">=</span> JDBCUnity.getconnection<span class="token punctuation">(</span><span class="token string">"studentdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------1.修改姓名----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------2.修改学号----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------3.修改密码----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------0.退出    ----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入你要进行的操作:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            choice <span class="token operator">=</span> scanner.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            switch <span class="token punctuation">(</span>choice<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">1</span>:                    System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>姓名改为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String name <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"update student set stuname=? where id=ID;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setString<span class="token punctuation">(</span><span class="token number">1</span>,name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span>:                    System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>学号改为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String <span class="token function">id</span> <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"update student set stuid=? where id=ID;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setString<span class="token punctuation">(</span><span class="token number">1</span>,id<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span>:                    System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>密码改为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String <span class="token builtin class-name">pwd</span> <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"update student set pwd=? where id=ID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setString<span class="token punctuation">(</span><span class="token number">1</span>,pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>menu-&gt;Teachermenu</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">package com.itcat.menu<span class="token punctuation">;</span><span class="token function">import</span> com.itcat.mysql.JDBCUnity<span class="token punctuation">;</span><span class="token function">import</span> com.itcat.server.StudentDemo<span class="token punctuation">;</span><span class="token function">import</span> java.sql.Connection<span class="token punctuation">;</span><span class="token function">import</span> java.sql.PreparedStatement<span class="token punctuation">;</span><span class="token function">import</span> java.sql.ResultSet<span class="token punctuation">;</span><span class="token function">import</span> java.sql.SQLException<span class="token punctuation">;</span><span class="token function">import</span> java.util.*<span class="token punctuation">;</span>@SuppressWarnings<span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>public class Teachermenu <span class="token punctuation">{</span>    private int classid<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span> StudentDemo<span class="token operator">&gt;</span> list <span class="token operator">=</span> new ArrayList<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    public Teachermenu<span class="token punctuation">(</span>int classid<span class="token punctuation">)</span><span class="token punctuation">{</span>        this.classid <span class="token operator">=</span> classid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void <span class="token function-name function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        int choice<span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>            read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------1.信息添加----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------2.信息查看----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------3.信息修改----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------4.信息删除----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------5.信息查询----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------6.成绩排名----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>--------------7.修改教师密码--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------0.退出    ----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入你要进行的操作:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            choice <span class="token operator">=</span> scanner.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            switch <span class="token punctuation">(</span>choice<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">1</span>:                    add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>//添加学生信息                <span class="token keyword">case</span> <span class="token number">2</span>:                    show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span>:                    change<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>//修改学生信息                <span class="token keyword">case</span> <span class="token number">4</span>:                    delete<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>//删除学生信息                <span class="token keyword">case</span> <span class="token number">5</span>:                    find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>//查询学生信息                <span class="token keyword">case</span> <span class="token number">6</span>:                    sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">7</span>:                    changeteacher<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public void <span class="token function-name function">changeteacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        int choice<span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement <span class="token function">ps</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            con <span class="token operator">=</span> JDBCUnity.getconnection<span class="token punctuation">(</span><span class="token string">"teacherdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>教师账号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String tid <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tid.equals<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">))</span><span class="token punctuation">{</span>                System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>账号不能为空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tid <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>密码改为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String <span class="token builtin class-name">pwd</span> <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pwd.equals<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">))</span><span class="token punctuation">{</span>                System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>密码不能为空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token builtin class-name">pwd</span> <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"update teacher set pwd=? where teacherid=?;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps.setString<span class="token punctuation">(</span><span class="token number">1</span>,pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps.setString<span class="token punctuation">(</span><span class="token number">2</span>,tid<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps.execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"修改成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            Thread.currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span>.sleep<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public void <span class="token function-name function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement <span class="token function">ps</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入要查询的学生学号:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String <span class="token function">id</span> <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            con <span class="token operator">=</span> JDBCUnity.getconnection<span class="token punctuation">(</span><span class="token string">"studentdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"select * from student where stuid=?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps.setString<span class="token punctuation">(</span><span class="token number">1</span>,id<span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> ps.executeQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"*********************************************************************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs.next<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>                int <span class="token function">sum</span> <span class="token operator">=</span> rs.getInt<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>+rs.getInt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>+rs.getInt<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>|学号："</span> + rs.getString<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> + <span class="token string">"|"</span> + <span class="token string">"姓名："</span> + rs.getString<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> + <span class="token string">"|"</span> + <span class="token string">"密码："</span> +                        rs.getString<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> + <span class="token string">"|"</span> + <span class="token string">"数学："</span> + rs.getInt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> + <span class="token string">"|"</span> + <span class="token string">"英语："</span> + rs.getInt<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> + <span class="token string">"|"</span> +                        <span class="token string">"Java："</span> + rs.getInt<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> + <span class="token string">"|"</span> + <span class="token string">"Sum："</span> + sum+ <span class="token string">"|"</span>+<span class="token string">"班级："</span> + rs.getInt<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> + <span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"*********************************************************************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public void <span class="token function-name function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        int choice<span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement <span class="token function">ps</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        boolean f <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入学号:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String <span class="token function">id</span> <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>StudentDemo t:list        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t.getId<span class="token punctuation">(</span><span class="token punctuation">)</span>.equals<span class="token punctuation">(</span>id<span class="token punctuation">))</span><span class="token punctuation">{</span>                f <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>此老师名下无此学生！或者此学生没有注册！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token builtin class-name">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        try <span class="token punctuation">{</span>            con <span class="token operator">=</span> JDBCUnity.getconnection<span class="token punctuation">(</span><span class="token string">"studentdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------1.修改姓名----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------2.修改学号----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------3.修改密码----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------4.修改数学----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------5.修改英语----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------6.修改Java----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------7.修改班级----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------0.退出    ----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入你要进行的操作:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            choice <span class="token operator">=</span> scanner.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            switch <span class="token punctuation">(</span>choice<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">1</span>:                    System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>姓名改为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String name <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"update student set stuname=? where stuid=? and class=?;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setString<span class="token punctuation">(</span><span class="token number">1</span>,name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setString<span class="token punctuation">(</span><span class="token number">2</span>,id<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setInt<span class="token punctuation">(</span><span class="token number">3</span>,classid<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span>:                    System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>学号改为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String id1 <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"update student set stuid=? where stuid=? and class=?;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setString<span class="token punctuation">(</span><span class="token number">1</span>,id1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setString<span class="token punctuation">(</span><span class="token number">2</span>,id<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setInt<span class="token punctuation">(</span><span class="token number">3</span>,classid<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span>:                    System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>密码改为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String <span class="token builtin class-name">pwd</span> <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"update student set pwd=? where stuid=? and class=?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setString<span class="token punctuation">(</span><span class="token number">1</span>,pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setString<span class="token punctuation">(</span><span class="token number">2</span>,id<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setInt<span class="token punctuation">(</span><span class="token number">3</span>,classid<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">4</span>:                    System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>数学改为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String math1 <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"update student set math=? where stuid=? and class=?;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setString<span class="token punctuation">(</span><span class="token number">1</span>,math1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setString<span class="token punctuation">(</span><span class="token number">2</span>,id<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setInt<span class="token punctuation">(</span><span class="token number">3</span>,classid<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">5</span>:                    System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>英语改为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String eng1 <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"update student set eng=? where stuid=? and class=?;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setString<span class="token punctuation">(</span><span class="token number">1</span>,eng1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setString<span class="token punctuation">(</span><span class="token number">2</span>,id<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setInt<span class="token punctuation">(</span><span class="token number">3</span>,classid<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">6</span>:                    System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>Java改为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String java1 <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"update student set java=? where stuid=? and class=?;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setString<span class="token punctuation">(</span><span class="token number">1</span>,java1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setString<span class="token punctuation">(</span><span class="token number">2</span>,id<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setInt<span class="token punctuation">(</span><span class="token number">3</span>,classid<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">7</span>:                    System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>班级改为："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    int classid1 <span class="token operator">=</span> scanner.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"update student set class=? where stuid=? and class=?;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setInt<span class="token punctuation">(</span><span class="token number">1</span>,classid1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setString<span class="token punctuation">(</span><span class="token number">2</span>,id<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.setInt<span class="token punctuation">(</span><span class="token number">3</span>,classid<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ps.execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public void <span class="token function-name function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        int choice<span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>            read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------1.数学排名----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------2.英语排名----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------3.Java排名----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------4.总分排名----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------0.退出    ----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入你要进行的操作:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            choice <span class="token operator">=</span> scanner.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            switch <span class="token punctuation">(</span>choice<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">1</span>:                    Collections.sort<span class="token punctuation">(</span>list, new Comparator<span class="token operator">&lt;</span>StudentDemo<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        @Override                        public int compare<span class="token punctuation">(</span>StudentDemo o1, StudentDemo o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token builtin class-name">return</span> -1 * <span class="token variable"><span class="token punctuation">((</span>Integer<span class="token punctuation">)</span><span class="token punctuation">(</span>o1.getMath<span class="token punctuation">(</span><span class="token punctuation">))</span></span><span class="token punctuation">)</span>.compareTo<span class="token variable"><span class="token punctuation">((</span>Integer<span class="token punctuation">)</span>o2.getMath<span class="token punctuation">(</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span>:                    Collections.sort<span class="token punctuation">(</span>list, new Comparator<span class="token operator">&lt;</span>StudentDemo<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        @Override                        public int compare<span class="token punctuation">(</span>StudentDemo o1, StudentDemo o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token builtin class-name">return</span> -1 * <span class="token variable"><span class="token punctuation">((</span>Integer<span class="token punctuation">)</span><span class="token punctuation">(</span>o1.getEnglish<span class="token punctuation">(</span><span class="token punctuation">))</span></span><span class="token punctuation">)</span>.compareTo<span class="token variable"><span class="token punctuation">((</span>Integer<span class="token punctuation">)</span>o2.getEnglish<span class="token punctuation">(</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span>:                    Collections.sort<span class="token punctuation">(</span>list, new Comparator<span class="token operator">&lt;</span>StudentDemo<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        @Override                        public int compare<span class="token punctuation">(</span>StudentDemo o1, StudentDemo o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token builtin class-name">return</span> -1 * <span class="token variable"><span class="token punctuation">((</span>Integer<span class="token punctuation">)</span><span class="token punctuation">(</span>o1.getJava<span class="token punctuation">(</span><span class="token punctuation">))</span></span><span class="token punctuation">)</span>.compareTo<span class="token variable"><span class="token punctuation">((</span>Integer<span class="token punctuation">)</span>o2.getJava<span class="token punctuation">(</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">4</span>:                    Collections.sort<span class="token punctuation">(</span>list, new Comparator<span class="token operator">&lt;</span>StudentDemo<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        @Override                        public int compare<span class="token punctuation">(</span>StudentDemo o1, StudentDemo o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token builtin class-name">return</span> -1 * <span class="token variable"><span class="token punctuation">((</span>Integer<span class="token punctuation">)</span><span class="token punctuation">(</span>o1.getSum<span class="token punctuation">(</span><span class="token punctuation">))</span></span><span class="token punctuation">)</span>.compareTo<span class="token variable"><span class="token punctuation">((</span>Integer<span class="token punctuation">)</span>o2.getSum<span class="token punctuation">(</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public void <span class="token function-name function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"*********************************************************************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> StudentDemo t:list        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>|学号："</span>+t.getId<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"|"</span>+<span class="token string">"姓名："</span>+t.getName<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"|"</span>+<span class="token string">"密码："</span>+                    t.getPwd<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"|"</span>+<span class="token string">"数学："</span>+t.getMath<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"|"</span>+<span class="token string">"英语："</span>+t.getEnglish<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"|"</span>+<span class="token string">"Java："</span>+t.getJava<span class="token punctuation">(</span><span class="token punctuation">)</span>+                    <span class="token string">"|"</span>+<span class="token string">"Sum："</span>+t.getSum<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"|"</span>+<span class="token string">"Class："</span>+t.getClassid<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"*********************************************************************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            Thread.sleep<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>InterruptedException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public void <span class="token function-name function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement <span class="token function">ps</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        int choice<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>            try <span class="token punctuation">{</span>                con <span class="token operator">=</span> JDBCUnity.getconnection<span class="token punctuation">(</span><span class="token string">"studentdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"insert into student (stuid,stuname,pwd,math,eng,java,class) values (?,?,?,?,?,?,?)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入学生id:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String <span class="token function">id</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">id</span> <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>id.equals<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">))</span><span class="token punctuation">{</span>                        System.out.println<span class="token punctuation">(</span><span class="token string">"学号不能为空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token builtin class-name">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    boolean f <span class="token operator">=</span> new Checkid<span class="token punctuation">(</span>id<span class="token punctuation">)</span>.checkstudent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>学号重复，请重新输入！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入学生id:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                ps.setObject<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token function">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入学生name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>name.equals<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">))</span><span class="token punctuation">{</span>                    System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>姓名不能为空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                ps.setObject<span class="token punctuation">(</span><span class="token number">2</span>, name<span class="token punctuation">)</span><span class="token punctuation">;</span>                System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入学生密码:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String <span class="token builtin class-name">pwd</span> <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pwd.equals<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">))</span><span class="token punctuation">{</span>                    System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>密码不能为空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                ps.setObject<span class="token punctuation">(</span><span class="token number">3</span>, <span class="token builtin class-name">pwd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>数学:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>int math <span class="token operator">=</span> scanner.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>英语:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>int eng <span class="token operator">=</span> scanner.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>Java:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>int java <span class="token operator">=</span> scanner.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ps.setInt<span class="token punctuation">(</span><span class="token number">4</span>,math<span class="token punctuation">)</span><span class="token punctuation">;</span>                ps.setInt<span class="token punctuation">(</span><span class="token number">5</span>,eng<span class="token punctuation">)</span><span class="token punctuation">;</span>                ps.setInt<span class="token punctuation">(</span><span class="token number">6</span>,java<span class="token punctuation">)</span><span class="token punctuation">;</span>                int classid1 <span class="token operator">=</span> classid<span class="token punctuation">;</span>                ps.setInt<span class="token punctuation">(</span><span class="token number">7</span>,classid1<span class="token punctuation">)</span><span class="token punctuation">;</span>                ps.execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>添加学生，按0退出，按1继续"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            choice <span class="token operator">=</span> scanner.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public void <span class="token function-name function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement <span class="token function">ps</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            con <span class="token operator">=</span> JDBCUnity.getconnection<span class="token punctuation">(</span><span class="token string">"studentdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>按名称删除--&gt;'1'    按学号删除--&gt;'2'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            int choice <span class="token operator">=</span> scanner.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"delete from student where stuname=? and class=?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入学生name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>name.equals<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">))</span><span class="token punctuation">{</span>                    System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>姓名不能为空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                ps.setObject<span class="token punctuation">(</span><span class="token number">1</span>, name<span class="token punctuation">)</span><span class="token punctuation">;</span>                ps.setObject<span class="token punctuation">(</span><span class="token number">2</span>, classid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>else <span class="token punctuation">{</span>                <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"delete from student where stuid=? and class=?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入学生id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String <span class="token function">id</span> <span class="token operator">=</span> scanner.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>id.equals<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">))</span><span class="token punctuation">{</span>                    System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>学号不能为空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                ps.setObject<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token function">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ps.setObject<span class="token punctuation">(</span><span class="token number">2</span>, classid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ps.execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public void <span class="token function-name function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list.clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement <span class="token function">ps</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            con <span class="token operator">=</span> JDBCUnity.getconnection<span class="token punctuation">(</span><span class="token string">"studentdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">ps</span> <span class="token operator">=</span> con.prepareStatement<span class="token punctuation">(</span><span class="token string">"select stuid,stuname,pwd,math,eng,java,class from student where id&gt;=? and class=?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps.setObject<span class="token punctuation">(</span><span class="token number">1</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps.setInt<span class="token punctuation">(</span><span class="token number">2</span>,classid<span class="token punctuation">)</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> ps.executeQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs.next<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>                int <span class="token function">sum</span> <span class="token operator">=</span> rs.getInt<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>+rs.getInt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>+rs.getInt<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                StudentDemo stu <span class="token operator">=</span>new StudentDemo<span class="token punctuation">(</span>rs.getString<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>,rs.getString<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>,                        rs.getString<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>,rs.getInt<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>,                        rs.getInt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>,rs.getInt<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>,sum,rs.getInt<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                list.add<span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql-&gt;JDBCUtil</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">import</span> java.sql.*<span class="token punctuation">;</span><span class="token function">import</span> java.util.Properties<span class="token punctuation">;</span>public class JDBCUnity <span class="token punctuation">{</span>    public static Connection getconnection<span class="token punctuation">(</span>String <span class="token builtin class-name">type</span><span class="token punctuation">)</span> throws SQLException, ClassNotFoundException <span class="token punctuation">{</span>        Class.forName<span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //建立连接        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        Properties info <span class="token operator">=</span> new Properties<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info.setProperty<span class="token punctuation">(</span><span class="token string">"user"</span>,<span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info.setProperty<span class="token punctuation">(</span><span class="token string">"password"</span>,<span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        try<span class="token punctuation">{</span>            Class.forName<span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/StudentServer"</span><span class="token punctuation">;</span>            con <span class="token operator">=</span> DriverManager.getConnection<span class="token punctuation">(</span>url,info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>catch<span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token builtin class-name">return</span> con<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public static void close<span class="token punctuation">(</span>PreparedStatement ps, ResultSet rs,Connection con<span class="token punctuation">)</span><span class="token punctuation">{</span>        try <span class="token punctuation">{</span>            ps.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        try <span class="token punctuation">{</span>            rs.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        try <span class="token punctuation">{</span>            con.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public static void close<span class="token punctuation">(</span> ResultSet rs,Connection con<span class="token punctuation">)</span><span class="token punctuation">{</span>        try <span class="token punctuation">{</span>            rs.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        try <span class="token punctuation">{</span>            con.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public static void close<span class="token punctuation">(</span>Connection con<span class="token punctuation">)</span><span class="token punctuation">{</span>        try <span class="token punctuation">{</span>            con.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>server-&gt;mainserver</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">package com.itcat.server<span class="token punctuation">;</span><span class="token function">import</span> com.itcat.denglu.studentdenglu<span class="token punctuation">;</span><span class="token function">import</span> com.itcat.denglu.teacherdenglu<span class="token punctuation">;</span><span class="token function">import</span> com.itcat.denglu.zhucetecaher<span class="token punctuation">;</span><span class="token function">import</span> com.itcat.menu.Teachermenu<span class="token punctuation">;</span><span class="token function">import</span> com.itcat.menu.Stumenu<span class="token punctuation">;</span><span class="token function">import</span> java.util.Scanner<span class="token punctuation">;</span>@SuppressWarnings<span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>public class mainserver <span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>        int choice<span class="token punctuation">;</span>        Scanner scanner <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------1.教师登陆----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------2.教师注册----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------3.学生登陆----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>----------------0.退出    ----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.print<span class="token punctuation">(</span><span class="token string">"<span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span><span class="token entity" title="\t">\t</span>请输入你要进行的操作:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            choice <span class="token operator">=</span> scanner.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            switch <span class="token punctuation">(</span>choice<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">1</span>:                    dengluteacher<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span>:                    new zhucetecaher<span class="token punctuation">(</span><span class="token punctuation">)</span>.zhuce<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span>:                    denglustudent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token builtin class-name">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public static void dengluteacher<span class="token punctuation">(</span><span class="token punctuation">)</span> throws InterruptedException <span class="token punctuation">{</span>        int t <span class="token operator">=</span> new teacherdenglu<span class="token punctuation">(</span><span class="token punctuation">)</span>.denglu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Teachermenu teachermenu <span class="token operator">=</span> new Teachermenu<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            teachermenu.menu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public static void denglustudent<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>        int t <span class="token operator">=</span> new studentdenglu<span class="token punctuation">(</span><span class="token punctuation">)</span>.denglu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Stumenu stumenu <span class="token operator">=</span> new Stumenu<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            stumenu.menu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>server-&gt;StudentDemo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">package com.itcat.server<span class="token punctuation">;</span>public class StudentDemo <span class="token punctuation">{</span>    private String <span class="token function">id</span><span class="token punctuation">;</span>    private String name<span class="token punctuation">;</span>    private String <span class="token builtin class-name">pwd</span><span class="token punctuation">;</span>    private int Math <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    private int Java <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    private int English <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    private int Sum<span class="token punctuation">;</span>    private int Classid<span class="token punctuation">;</span>    public StudentDemo<span class="token punctuation">(</span>String id, String name, String pwd, int math, int china, int english, int sum, int Classid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.id <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">;</span>        this.name <span class="token operator">=</span> name<span class="token punctuation">;</span>        this.pwd <span class="token operator">=</span> <span class="token builtin class-name">pwd</span><span class="token punctuation">;</span>        Math <span class="token operator">=</span> math<span class="token punctuation">;</span>        Java <span class="token operator">=</span> china<span class="token punctuation">;</span>        English <span class="token operator">=</span> english<span class="token punctuation">;</span>        Sum <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">;</span>        this.Classid <span class="token operator">=</span> Classid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public int <span class="token function-name function">getClassid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> Classid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setClass<span class="token punctuation">(</span>int aClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Classid <span class="token operator">=</span> aClass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String <span class="token function-name function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> <span class="token function">id</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setId<span class="token punctuation">(</span>String <span class="token function">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.id <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String <span class="token function-name function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setName<span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String <span class="token function-name function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> <span class="token builtin class-name">pwd</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setPwd<span class="token punctuation">(</span>String <span class="token builtin class-name">pwd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.pwd <span class="token operator">=</span> <span class="token builtin class-name">pwd</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public int <span class="token function-name function">getMath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> Math<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setMath<span class="token punctuation">(</span>int math<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Math <span class="token operator">=</span> math<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public int <span class="token function-name function">getJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> Java<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setJava<span class="token punctuation">(</span>int china<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Java <span class="token operator">=</span> china<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public int <span class="token function-name function">getEnglish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> English<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setEnglish<span class="token punctuation">(</span>int english<span class="token punctuation">)</span> <span class="token punctuation">{</span>        English <span class="token operator">=</span> english<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public int <span class="token function-name function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> English + Math + Java<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setSum<span class="token punctuation">(</span>int <span class="token function">sum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Sum <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public StudentDemo<span class="token punctuation">(</span>int math, int china, int english<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Math <span class="token operator">=</span> math<span class="token punctuation">;</span>        Java <span class="token operator">=</span> china<span class="token punctuation">;</span>        English <span class="token operator">=</span> english<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>server-&gt;TeacherDemo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">package com.itcat.server<span class="token punctuation">;</span>public class TeacherDemo <span class="token punctuation">{</span>    private String <span class="token function">id</span><span class="token punctuation">;</span>    private String <span class="token builtin class-name">pwd</span><span class="token punctuation">;</span>    private int classid<span class="token punctuation">;</span>    public TeacherDemo<span class="token punctuation">(</span>String id, String pwd, int classid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.id <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">;</span>        this.pwd <span class="token operator">=</span> <span class="token builtin class-name">pwd</span><span class="token punctuation">;</span>        this.classid <span class="token operator">=</span> classid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String <span class="token function-name function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> <span class="token function">id</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setId<span class="token punctuation">(</span>String <span class="token function">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.id <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String <span class="token function-name function">getPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> <span class="token builtin class-name">pwd</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setPwd<span class="token punctuation">(</span>String <span class="token builtin class-name">pwd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.pwd <span class="token operator">=</span> <span class="token builtin class-name">pwd</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public int <span class="token function-name function">getClassid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> classid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setClassid<span class="token punctuation">(</span>int classid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.classid <span class="token operator">=</span> classid<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> IDEA </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
